	CREATE OR REPLACE FUNCTION script_creation_menus_ecrans() RETURNS INT AS
$$
DECLARE
output_result INTEGER = 1;
tableliste_ident INTEGER = 0;

BEGIN

	-- Menus Abonnement service ATM
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Abt') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Abt', maketraductionlangsyst('Gestion des abonnements ATM'), 'Gen-9', 5, 11, true, 13, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Abt-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Abt-1', maketraductionlangsyst('Liste des abonnements ATM'), 'Abt', 6, 1, false, 13, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Abt-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable)	VALUES ('Abt-2', maketraductionlangsyst('Inscripton abonnement'), 'Abt', 6, 2, false, 13, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Abt-3') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Abt-3', maketraductionlangsyst('Modification abonnement'), 'Abt', 6, 3, false, 13, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Abt-4') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Abt-4', maketraductionlangsyst('Confirmation abonnement'), 'Abt', 6, 4, false, 13, false);
	END IF;


	-- Ecrans
	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Abt-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Abt-1', 'modules/clients/abonnement_atm.php', 'Abt-1', 13);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Abt-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Abt-2', 'modules/clients/abonnement_atm.php', 'Abt-2', 13);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Abt-3') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Abt-3', 'modules/clients/abonnement_atm.php', 'Abt-3', 13);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Abt-4') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Abt-4', 'modules/clients/abonnement_atm.php', 'Abt-4', 13);
	END IF;


	-- Menus Commande de carte ATM
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Caa') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Caa', maketraductionlangsyst('Commande carte ATM'), 'Gen-4', 5, 6, true, 46, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Caa-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Caa-1', maketraductionlangsyst('Sélection compte'), 'Caa', 6, 1, false, 46, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Caa-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Caa-2', maketraductionlangsyst('Confirmation'), 'Caa', 6, 2, false, 46, false);
	END IF;


	--Ecrans
	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Caa-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Caa-1', 'modules/clients/commande_carte_atm.php', 'Caa-1', 46);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Caa-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Caa-2', 'modules/clients/commande_carte_atm.php', 'Caa-2', 46);
	END IF;


	--Creation nouveau main menu + side menus :Gestion des cartes ATM : 198
	IF NOT EXISTS (select * from menus where nom_menu = 'Gca') THEN
		--insertion code
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable)
		VALUES ('Gca', maketraductionlangsyst('Gestion des cartes ATM'), 'Gen-6', 3, 17, true, 807, true);
		RAISE NOTICE 'Main Menu created!';
	END IF;

	----------------ecrans
	IF NOT EXISTS (select * from ecrans where nom_ecran = 'Gca-1') THEN
	 --insertion code
	 INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction)
	 VALUES ('Gca-1', 'modules/guichet/gestion_carte_atm.php', 'Gca', 807);
	END IF;


	-- Menus Liste des commandes a envoyer pour impression
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Lci') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Lci', maketraductionlangsyst('Listes des commandes à envoyer pour impression'), 'Gca', 4, 1, true, 808, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Lci-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Lci-1', maketraductionlangsyst('Liste des commandes'), 'Lci', 5, 1, false, 808, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Lci-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Lci-2', maketraductionlangsyst('Export CSV'), 'Lci', 5, 2, false, 808, false);
	END IF;


	-- Ecrans Liste des commandes a envoyer pour impression
	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Lci-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Lci-1', 'modules/guichet/liste_carte_imprimer.php', 'Lci-1', 808);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Lci-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Lci-2', 'modules/guichet/liste_carte_imprimer.php', 'Lci-2', 808);
	END IF;


	-- Menus Import des cartes imprimées
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ici') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ici', maketraductionlangsyst('Liste des cartes imprimées à importer'), 'Gca', 4, 2, true, 809, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ici-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ici-1', maketraductionlangsyst('Import CSV'), 'Ici', 5, 1, false, 809, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ici-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ici-2', maketraductionlangsyst('Liste des cartes imprimées à importer'), 'Ici', 5, 2, false, 809, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ici-3') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ici-3', maketraductionlangsyst('Confirmation des cartes imprimées'), 'Ici', 5, 3, false, 809, false);
	END IF;


	-- Ecrans Liste des commandes a envoyer pour impression
	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Ici-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Ici-1', 'modules/guichet/import_carte_imprimer.php', 'Ici-1', 809);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Ici-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Ici-2', 'modules/guichet/import_carte_imprimer.php', 'Ici-2', 809);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Ici-3') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Ici-3', 'modules/guichet/import_carte_imprimer.php', 'Ici-3', 809);
	END IF;



	-- Menus Historisation des imports
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Hic') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Hic', maketraductionlangsyst('Historique des commandes envoyées'), 'Gca', 4, 3, true, 810, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Hic-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Hic-1', maketraductionlangsyst('Liste exports commandes'), 'Hic', 5, 1, false, 810, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Hic-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Hic-2', maketraductionlangsyst('Export CSV'), 'Hic', 5, 2, false, 810, false);
	END IF;


	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Hic-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Hic-1', 'modules/guichet/historique_commande_export.php', 'Hic-1', 810);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Hic-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Hic-2', 'modules/guichet/historique_commande_export.php', 'Hic-1', 810);
	END IF;



		-- Menus Liste des cartes
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ldc') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ldc', maketraductionlangsyst('Liste de toutes les cartes'), 'Gca', 4, 4, true, 811, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ldc-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ldc-1', maketraductionlangsyst('Critères de recherche'), 'Ldc', 5, 1, false, 811, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Ldc-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Ldc-2', maketraductionlangsyst('Export CSV'), 'Ldc', 5, 2, false, 811, false);
	END IF;


	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Ldc-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Ldc-1', 'modules/guichet/liste_all_cartes.php', 'Ldc-1', 811);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Ldc-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Ldc-2', 'modules/guichet/liste_all_cartes.php', 'Ldc-2', 811);
	END IF;

		IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Ldc-3') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Ldc-3', 'modules/guichet/liste_all_cartes.php', 'Ldc-2', 811);
	END IF;



	-- Menus Retrait de carte ATM
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rct') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rct', maketraductionlangsyst('Retrait carte ATM'), 'Gen-4', 5, 7, true, 47, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rct-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rct-1', maketraductionlangsyst('Sélection compte'), 'Rct', 6, 1, false, 47, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rct-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rct-2', maketraductionlangsyst('Confirmation'), 'Rct', 6, 2, false, 47, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rct-3') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rct-3', maketraductionlangsyst('Validation'), 'Rct', 6, 3, false, 47, false);
	END IF;


	--Ecrans
	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Rct-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Rct-1', 'modules/clients/retrait_carte_atm.php', 'Rct-1', 47);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Rct-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Rct-2', 'modules/clients/retrait_carte_atm.php', 'Rct-2', 47);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Rct-3') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Rct-3', 'modules/clients/retrait_carte_atm.php', 'Rct-3', 47);
	END IF;


	-- Menus gestion des cartes suspendues et desactives
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Gcs') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Gcs', maketraductionlangsyst('Gestion des cartes suspendues/désactivées'), 'Gen-4', 5, 8, true, 48, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Gcs-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Gcs-1', maketraductionlangsyst('Liste des cartes'), 'Gcs', 6, 1, false, 48, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Gcs-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Gcs-2', maketraductionlangsyst('Details cartes'), 'Gcs', 6, 2, false, 48, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Gcs-3') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Gcs-3', maketraductionlangsyst('Confirmation carte'), 'Gcs', 6, 3, false, 48, false);
	END IF;



	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Gcs-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Gcs-1', 'modules/clients/gestion_carte_suspendues_desactivees.php', 'Gcs-1', 48);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Gcs-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Gcs-2', 'modules/clients/gestion_carte_suspendues_desactivees.php', 'Gcs-2', 48);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Gcs-3') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Gcs-3', 'modules/clients/gestion_carte_suspendues_desactivees.php', 'Gcs-3', 48);
	END IF;

	-- Menus Rapports
	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rat') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rat', maketraductionlangsyst('Liste des rapports ATM'), 'Gca', 4, 5, true, 812, true);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rat-1') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rat-1', maketraductionlangsyst('Choix rapports'), 'Rat', 5, 1, false, 812, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rat-2') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rat-2', maketraductionlangsyst('Personnalisation rapport'), 'Rat', 5, 2, false, 812, false);
	END IF;

	IF NOT EXISTS(SELECT nom_menu FROM menus WHERE nom_menu='Rat-3') THEN
		INSERT INTO menus (nom_menu, libel_menu, nom_pere, pos_hierarch, ordre, is_menu,fonction, is_cliquable) VALUES ('Rat-3', maketraductionlangsyst('Export données'), 'Rat', 5, 3, false, 812, false);
	END IF;



	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Rat-1') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Rat-1', 'modules/guichet/rapport_atm.php', 'Rat-1', 812);
	END IF;

	IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Rat-2') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Rat-2', 'modules/guichet/rapport_atm.php', 'Rat-2', 812);
	END IF;

		IF NOT EXISTS (SELECT nom_ecran FROM ecrans WHERE nom_ecran='Rat-3') THEN
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction) VALUES ('Rat-3', 'modules/guichet/rapport_atm.php', 'Rat-2', 812);
	END IF;




	RETURN output_result;

END;
$$
LANGUAGE plpgsql;

SELECT script_creation_menus_ecrans();
DROP FUNCTION script_creation_menus_ecrans();


--------------------------------------------------------Debut Ticket ticket_AT_169----------------------------------------------
CREATE OR REPLACE FUNCTION script_creation_table()
  RETURNS INT AS
$$
DECLARE
output_result INTEGER := 1;
tableliste_ident INTEGER :=0;
d_tableliste_str INTEGER :=0;

BEGIN

IF NOT EXISTS(SELECT * FROM information_schema.tables WHERE table_name = 'ad_carte_atm') THEN

create table ad_carte_atm
(	id_carte serial NOT NULL,
	ref_no varchar(250),
	id_client integer,
	id_prestataire integer,
	id_cpte integer,
	nom_sur_carte text,
	etat_carte integer,
	num_carte_atm varchar(250),
	motif_demande	integer,
	date_carte_debut_validite	timestamp without time zone,
	date_carte_expiration	timestamp without time zone,
	date_demande	timestamp without time zone,
	date_envoi_impression	timestamp without time zone,
	date_livraison	timestamp without time zone,
	date_activation	timestamp without time zone,
	date_suspension	timestamp without time zone,
	motif_suspension	integer,
	date_desactivation	timestamp without time zone,
	id_ag	integer,
	id_export	integer,
	id_import	integer,
	date_creation	timestamp without time zone,
	date_modif	timestamp without time zone,
	CONSTRAINT ad_carte_atm_id_pkey PRIMARY KEY (id_carte, id_ag),
	CONSTRAINT ad_carte_atm_id_client_fkey FOREIGN KEY (id_client,id_ag) REFERENCES ad_cli (id_client,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT ad_carte_atm_id_cpte_fkey FOREIGN KEY (id_cpte,id_ag) REFERENCES ad_cpt (id_cpte,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
	);

END IF;


IF NOT EXISTS(SELECT * FROM information_schema.tables WHERE table_name = 'ad_carte_atm_his') THEN

create table ad_carte_atm_his (
	id	serial NOT NULL,
	id_carte	integer,
	etat_carte	integer,
	date_etat	timestamp without time zone,
	commentaires	text,
	id_ag	integer,
	date_creation	timestamp without time zone,
	CONSTRAINT ad_carte_atm_his_id_pkey PRIMARY KEY (id, id_ag),
	CONSTRAINT ad_carte_atm_his_id_carte_fkey FOREIGN KEY (id_carte,id_ag) REFERENCES ad_carte_atm (id_carte,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
	);
END IF;

IF NOT EXISTS(SELECT * FROM information_schema.tables WHERE table_name = 'ad_commande_carte_his') THEN
create table ad_commande_carte_his (
	id	serial NOT NULL,
	type	integer,
	date_traitement	timestamp without time zone,
	nom_interne	varchar(250),
	chemin_fichier	text,
	nbre_cartes	integer,
	ref_externe	text,
	id_ag	integer,
	id_his integer,
	date_creation	timestamp without time zone,
	CONSTRAINT ad_commande_carte_his_id_pkey PRIMARY KEY (id, id_ag)
	);
END IF;



IF NOT EXISTS(SELECT * FROM information_schema.tables WHERE table_name = 'ad_transactions_atm_his') THEN
create table ad_transactions_atm_his (
	id	serial NOT NULL,
	id_carte	integer,
	id_client	integer,
	date_comptable	timestamp without time zone,
	compte_comptable	varchar(250),
	cpte_interne_cli	integer,
	montant	numeric(30,0),
	id_mouvement	text,
	id_his	integer,
	sens	varchar(250),
	devise	text,
	type_operation	integer,
	libel_ecriture	integer,
	id_ag	integer,
	date_creation	timestamp without time zone,
	CONSTRAINT ad_transactions_atm_his_id_pkey PRIMARY KEY (id, id_ag),
	CONSTRAINT ad_transactions_atm_his_id_carte_fkey FOREIGN KEY (id_carte,id_ag) REFERENCES ad_carte_atm (id_carte,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT ad_transactions_atm_his_id_client_fkey FOREIGN KEY (id_client,id_ag) REFERENCES ad_cli (id_client,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
	);
END IF;

IF NOT EXISTS(SELECT * FROM information_schema.tables WHERE table_name = 'ad_abonnement_atm') THEN
create table ad_abonnement_atm (
	id_abonnement	serial NOT NULL,
	id_cpte	integer,
	id_client	integer,
	identifiant_client	varchar(250),
	id_carte	integer	,
	num_carte_atm	varchar(250),
	statut	integer	,
	id_ag	integer	,
	date_creation	timestamp without time zone	,
	date_modif	timestamp without time zone,
	CONSTRAINT ad_abonnement_atm_id_pkey PRIMARY KEY (id_abonnement, id_ag),
	CONSTRAINT ad_abonnement_atm_id_cpte_fkey FOREIGN KEY (id_cpte,id_ag) REFERENCES ad_cpt (id_cpte,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT ad_abonnement_atm_id_client_fkey FOREIGN KEY (id_client,id_ag) REFERENCES ad_cli (id_client,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION,
	CONSTRAINT ad_abonnement_atm_id_carte_fkey FOREIGN KEY (id_carte,id_ag) REFERENCES ad_carte_atm (id_carte,id_ag) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION
	);
END IF;

-- column type_prestataire
IF NOT EXISTS(SELECT * FROM information_schema.columns WHERE table_name = 'ad_ewallet' AND column_name = 'type_prestataire') THEN
	ALTER TABLE ad_ewallet ADD COLUMN type_prestataire integer;
	select INTO tableliste_ident ident from tableliste where nomc like 'ad_ewallet' order by ident desc limit 1;
	d_tableliste_str := makeTraductionLangSyst('Type prestataire');
	INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident, 'type_prestataire', d_tableliste_str, true,null, 'int', NULL, NULL, false);
	IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
		INSERT INTO ad_traductions VALUES (d_tableliste_str,'en_GB','Type of operator');
	END IF;
END IF;



-- Function: trig_insert_ad_carte_atm_his()

-- DROP FUNCTION trig_insert_ad_carte_atm_his();

CREATE OR REPLACE FUNCTION trig_insert_ad_carte_atm_his()
  RETURNS trigger AS
$BODY$
  BEGIN
    IF (OLD.etat_carte != NEW.etat_carte) THEN
		INSERT INTO ad_carte_atm_his (date_etat, id_carte, etat_carte, id_ag, date_creation)
		VALUES (NOW(), OLD.id_carte, OLD.etat_carte, OLD.id_ag, NOW());
	END IF;
    RETURN NEW;
  END;
	$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION trig_insert_ad_carte_atm_his()
  OWNER TO postgres;


CREATE TRIGGER trig_before_update_ad_carte_atm
  BEFORE UPDATE
  ON ad_carte_atm
  FOR EACH ROW
  EXECUTE PROCEDURE trig_insert_ad_carte_atm_his();

	RETURN output_result;

END;
$$
LANGUAGE plpgsql;

SELECT script_creation_table();
DROP FUNCTION script_creation_table();



  CREATE OR REPLACE FUNCTION update_mobile_banking_bswitch()
  RETURNS INT AS
$$
DECLARE
  output_result    INTEGER = 1;
  tableliste_ident INTEGER = 0;
BEGIN
  RAISE NOTICE 'START';

  IF NOT EXISTS(SELECT *
                FROM ad_ewallet
                WHERE nom_prestataire = 'BSWTICH' AND code_prestataire = 'BSWITCH_BI' AND id_ag = numagc())
  THEN
    INSERT INTO ad_ewallet (id_prestataire, id_ag, nom_prestataire, code_prestataire, compte_comptable)
    VALUES (4, numagc(), 'BSWITCH', 'BSWITCH_BI', NULL);
    output_result := 2;
  END IF;

 IF NOT EXISTS(SELECT *
                FROM ad_ewallet
                WHERE nom_prestataire = 'MTN' AND code_prestataire = 'MTN_RW' AND id_ag = numagc())
  THEN
  UPDATE ad_ewallet SET type_prestataire = 1 WHERE nom_prestataire = 'MTN' AND code_prestataire = 'MTN_RW';
  END IF;

  IF NOT EXISTS(SELECT *
                FROM ad_ewallet
                WHERE nom_prestataire = 'Airtel' AND code_prestataire = 'AIRTEL_RW' AND id_ag = numagc())
  THEN
  UPDATE ad_ewallet SET type_prestataire = 1 WHERE nom_prestataire = 'Airtel' AND code_prestataire = 'AIRTEL_RW';
  END IF;


   RAISE NOTICE 'END';
  RETURN output_result;

END;
$$
LANGUAGE plpgsql;

SELECT update_mobile_banking_bswitch();
DROP FUNCTION update_mobile_banking_bswitch();



CREATE OR REPLACE FUNCTION script_operation_compta() RETURNS INT AS
$$
DECLARE
output_result INTEGER = 1;
tableliste_ident INTEGER = 0;

BEGIN

	-- Création opération Frais activation abonnement ATM
	IF NOT EXISTS(SELECT * FROM ad_cpt_ope WHERE type_operation=189 AND categorie_ope = 1 AND id_ag = numagc()) THEN
		-- Frais activation abonnement ATM
		INSERT INTO ad_cpt_ope(type_operation, categorie_ope, id_ag, libel_ope)
		VALUES (189, 1, numagc(), maketraductionlangsyst('Frais activation abonnement ATM'));

		RAISE NOTICE 'Insertion type_operation 189 dans la table ad_cpt_ope effectuée';
		output_result := 2;
	END IF;

	IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=189 AND sens = 'd' AND categorie_cpte = 1 AND id_ag = numagc()) THEN
		INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (189, NULL, 'd', 1, numagc());

		RAISE NOTICE 'Insertion type_operation 189 sens ''d'' dans la table ad_cpt_ope_cptes effectuée';
		output_result := 2;
	END IF;

	IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=189 AND sens = 'c' AND categorie_cpte = 0 AND id_ag = numagc()) THEN
		INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (189, NULL, 'c', 0, numagc());

		RAISE NOTICE 'Insertion type_operation 189 sens ''c'' dans la table ad_cpt_ope_cptes effectuée';
		output_result := 2;
	END IF;

		-- Création opération Frais transaction ATM
	IF NOT EXISTS(SELECT * FROM ad_cpt_ope WHERE type_operation=190 AND categorie_ope = 1 AND id_ag = numagc()) THEN
		-- Frais transaction ATM
		INSERT INTO ad_cpt_ope(type_operation, categorie_ope, id_ag, libel_ope)
		VALUES (190, 1, numagc(), maketraductionlangsyst('Frais transaction ATM'));

		RAISE NOTICE 'Insertion type_operation 190 dans la table ad_cpt_ope effectuée';
		output_result := 2;
	END IF;

	IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=190 AND sens = 'd' AND categorie_cpte = 1 AND id_ag = numagc()) THEN
		INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (190, NULL, 'd', 1, numagc());

		RAISE NOTICE 'Insertion type_operation 190 sens ''d'' dans la table ad_cpt_ope_cptes effectuée';
		output_result := 2;
	END IF;

	IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=190 AND sens = 'c' AND categorie_cpte = 0 AND id_ag = numagc()) THEN
		INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (190, NULL, 'c', 0, numagc());

		RAISE NOTICE 'Insertion type_operation 190 sens ''c'' dans la table ad_cpt_ope_cptes effectuée';
		output_result := 2;
	END IF;


		-- Création opération Retrait ATM
	IF NOT EXISTS(SELECT * FROM ad_cpt_ope WHERE type_operation=191 AND categorie_ope = 1 AND id_ag = numagc()) THEN
		-- Retrait ATM
		INSERT INTO ad_cpt_ope(type_operation, categorie_ope, id_ag, libel_ope)
		VALUES (191, 1, numagc(), maketraductionlangsyst('Retrait ATM'));

		RAISE NOTICE 'Insertion type_operation 191 dans la table ad_cpt_ope effectuée';
		output_result := 2;
	END IF;

	IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=191 AND sens = 'd' AND categorie_cpte = 1 AND id_ag = numagc()) THEN
		INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (191, NULL, 'd', 1, numagc());

		RAISE NOTICE 'Insertion type_operation 191 sens ''d'' dans la table ad_cpt_ope_cptes effectuée';
		output_result := 2;
	END IF;

	IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=191 AND sens = 'c' AND categorie_cpte = 28 AND id_ag = numagc()) THEN
		INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (191, NULL, 'c', 28, numagc());

		RAISE NOTICE 'Insertion type_operation 191 sens ''c'' dans la table ad_cpt_ope_cptes effectuée';
		output_result := 2;
	END IF;



	IF NOT EXISTS(SELECT * FROM ad_cpt_ope WHERE type_operation=192 AND categorie_ope = 1 AND id_ag = numagc()) THEN
    -- Revirement ATM
    INSERT INTO ad_cpt_ope(type_operation, categorie_ope, id_ag, libel_ope) VALUES (192, 1, numagc(), maketraductionlangsyst('Revirement ATM'));

    RAISE NOTICE 'Insertion type_operation 192 dans la table ad_cpt_ope effectuée';
    output_result := 2;
  END IF;

  IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=192 AND sens = 'd' AND categorie_cpte = 28 AND id_ag = numagc()) THEN
    INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (192, NULL, 'd', 28, numagc());

    RAISE NOTICE 'Insertion type_operation 192 sens ''d'' dans la table ad_cpt_ope_cptes effectuée';
    output_result := 2;
  END IF;

  IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation=192 AND sens = 'c' AND categorie_cpte = 1 AND id_ag = numagc()) THEN
    INSERT INTO ad_cpt_ope_cptes(type_operation, num_cpte, sens, categorie_cpte, id_ag) VALUES (192, NULL, 'c', 1, numagc());

    RAISE NOTICE 'Insertion type_operation 192 sens ''c'' dans la table ad_cpt_ope_cptes effectuée';
    output_result := 2;
  END IF;

	-- Insertion dans la table tarification : Frais abonnement ATM
	  --Creation du frais
	  INSERT INTO adsys_tarification (id_tarification, code_abonnement, type_de_frais, mode_frais, valeur, compte_comptable, date_debut_validite, date_fin_validite, statut, id_ag) VALUES (15, 'atm', 'ATM_REG', '1', '0', null, null, null, 't', numagc());

	  RAISE NOTICE 'Insertion type_frais SMS_FRAIS dans la table adsys_tarification effectuée';


	-- Insertion dans la table tarification : Frais activation service ATM
	  	  --Creation du frais
	  INSERT INTO adsys_tarification (id_tarification, code_abonnement, type_de_frais, mode_frais, valeur, compte_comptable, date_debut_validite, date_fin_validite, statut, id_ag) VALUES (16, 'atm', 'ATM_TSC', '1', '0', null, null, null, 't', numagc());

	  RAISE NOTICE 'Insertion type_frais SMS_FRAIS dans la table adsys_tarification effectuée';


	RETURN output_result;

END;
$$
LANGUAGE plpgsql;

SELECT script_operation_compta();
DROP FUNCTION script_operation_compta();



/****************************************Partie FUSION************************************************************************************/
CREATE OR REPLACE FUNCTION update_fusion()
  RETURNS INT AS
$$
DECLARE
  output_result    INTEGER = 1;
  tableliste_ident_niveau INTEGER = 0;
  tableliste_ident_client INTEGER = 0;
  tableliste_ident_log INTEGER = 0;
  id_str_trad INTEGER = 0;
  tablen_id INTEGER = 0;
BEGIN

	IF NOT EXISTS(SELECT * FROM information_schema.tables WHERE table_name = 'adsys_niveau_fenacobu') THEN

	   CREATE TABLE adsys_niveau_fenacobu
	(
	  id serial NOT NULL,
	  libelle_niveau text,
	  type_niveau integer,
	  parent integer,
	  id_ag integer,
	  CONSTRAINT adsys_niveau_fenacobu_pkey PRIMARY KEY (id, id_ag)
	);

	END IF;

		  -- Insertion dans tableliste
	IF NOT EXISTS(SELECT * FROM tableliste WHERE nomc = 'adsys_niveau_fenacobu') THEN
		INSERT INTO tableliste VALUES ((select max(ident) from tableliste)+1, 'adsys_niveau_fenacobu', makeTraductionLangSyst('"Paramétrage des niveaux agences FENACOBU"'), true);
		RAISE NOTICE 'Données table adsys_niveau_fenacobu rajoutés dans table tableliste';
	END IF;

	tableliste_ident_niveau := (select ident from tableliste where nomc like 'adsys_niveau_fenacobu' order by ident desc limit 1);

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'libelle_niveau' and tablen = tableliste_ident_niveau) THEN
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_niveau, 'libelle_niveau', makeTraductionLangSyst('Libelle niveau'), true, NULL, 'txt', true, null, false);
	END IF;

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'type_niveau' and tablen = tableliste_ident_niveau) THEN
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_niveau, 'type_niveau', makeTraductionLangSyst('Type niveau'), false, NULL, 'int', false, false, false);
	END IF;

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'parent' and tablen = tableliste_ident_niveau) THEN
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_niveau, 'parent', makeTraductionLangSyst('Parent'), false, NULL, 'int', false, false, false);
	END IF;

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'id' and tablen = tableliste_ident_niveau) THEN
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_niveau, 'id', makeTraductionLangSyst('Id localisation'), true, NULL, 'int', null, true, false);
	END IF;

	IF NOT EXISTS (select * from ecrans where nom_ecran = 'Lob-1') THEN
		--insertion code
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction)
		VALUES ('Lob-1', 'modules/parametrage/tables.php', 'Pta', 292);
		RAISE NOTICE 'Ecran 1 created!';
	END IF;

	IF NOT EXISTS (select * from ecrans where nom_ecran = 'Lob-2') THEN
		--insertion code
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction)
		VALUES ('Lob-2', 'modules/parametrage/tables.php', 'Pta', 292);
		RAISE NOTICE 'Ecran 1 created!';
	END IF;

	IF NOT EXISTS (select * from ecrans where nom_ecran = 'Lob-3') THEN
		--insertion code
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction)
		VALUES ('Lob-3', 'modules/parametrage/tables.php', 'Pta', 292);
		RAISE NOTICE 'Ecran 1 created!';
	END IF;


	tableliste_ident_client := (select ident from tableliste where nomc like 'ad_cli' order by ident desc limit 1);

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'n_agence' and tablen = tableliste_ident_client) THEN
	  ALTER TABLE ad_cli ADD n_agence INTEGER;
	  d_tableliste_str := makeTraductionLangSyst('Agence');
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_client, 'n_agence', d_tableliste_str, true, (SELECT ident from d_tableliste where tablen = tableliste_ident_niveau and nchmpc = 'id'), 'int', true, false, false);
	END IF;

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'n_guichet' and tablen = tableliste_ident_client) THEN
	  ALTER TABLE ad_cli ADD n_guichet INTEGER;
	  d_tableliste_str := makeTraductionLangSyst('Guichet');
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_client, 'n_guichet', d_tableliste_str, true, (SELECT ident from d_tableliste where tablen = tableliste_ident_niveau and nchmpc = 'id'), 'int', true, false, false);
	END IF;

	tableliste_ident_log := (select ident from tableliste where nomc like 'ad_log' order by ident desc limit 1);

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'n_agence' and tablen = tableliste_ident_log) THEN
	  ALTER TABLE ad_log ADD n_agence INTEGER;
	  d_tableliste_str := makeTraductionLangSyst('Agence');
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_log, 'n_agence', d_tableliste_str, true, (SELECT ident from d_tableliste where tablen = tableliste_ident_niveau and nchmpc = 'id'), 'int', true, false, false);
	END IF;

	IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'n_guichet' and tablen = tableliste_ident_log) THEN
	  ALTER TABLE ad_log ADD n_guichet INTEGER;
	  d_tableliste_str := makeTraductionLangSyst('Guichet');
	  INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_ident_log, 'n_guichet', d_tableliste_str, true, (SELECT ident from d_tableliste where tablen = tableliste_ident_niveau and nchmpc = 'id'), 'int', true, false, false);
	END IF;

	    id_str_trad := maketraductionlangsyst('Localisation');

    IF NOT EXISTS(SELECT * FROM tableliste WHERE nomc = 'type_niveau_fenacobu') THEN
      INSERT INTO tableliste VALUES (
      (select max(ident) from tableliste)+1,
      'type_niveau_fenacobu',
      id_str_trad,
      false);
      RAISE NOTICE 'Données table adsys_localisation_ml rajoutés dans table tableliste';
    END IF;

    tablen_id := (SELECT ident FROM tableliste WHERE nomc = 'type_niveau_fenacobu');

    IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'id' and tablen = tablen_id) THEN
    INSERT INTO d_tableliste VALUES ((select max(ident)
    from d_tableliste)+1, tablen_id, 'id', makeTraductionLangSyst('Id'), TRUE, NULL, 'int', NULL, TRUE, FALSE);
    END IF;


	--insertion ecran intermediaire pour filtrer les niveaux : ajout ecran Ich-5
	IF NOT EXISTS (select * from ecrans where nom_ecran = 'Ich-5') THEN
		--insertion code
		INSERT INTO ecrans(nom_ecran, fichier, nom_menu, fonction)
		VALUES ('Ich-5', 'modules/guichet/chequier_imprimer.php', 'Ich', 191);
		RAISE NOTICE 'Ecran 1 created!';
	END IF;



RETURN output_result;

END;
$$
LANGUAGE plpgsql;

SELECT update_fusion();
DROP FUNCTION update_fusion();


---- FICHIER SQL AT-145
CREATE OR REPLACE FUNCTION script_at_145() RETURNS INT AS
		$$
		DECLARE
			output_result INTEGER = 1;
			id_str_trad integer = 0;
			tableliste_id INTEGER = 0;
			tableliste_epargne INTEGER = 0;
		BEGIN

			-- ADD column cpte_dormant_nbre_jour in table adsys_param_epargne
			IF NOT EXISTS(SELECT * FROM information_schema.columns WHERE table_name = 'adsys_param_epargne' AND column_name = 'cpte_dormant_nbre_jour') THEN
				ALTER TABLE adsys_param_epargne ADD COLUMN cpte_dormant_nbre_jour INTEGER;
			END IF;

			-- ADD column cpte_dormant_frais_tenue_cpte in table adsys_param_epargne
			IF NOT EXISTS(SELECT * FROM information_schema.columns WHERE table_name = 'adsys_param_epargne' AND column_name = 'cpte_dormant_frais_tenue_cpte') THEN
				ALTER TABLE adsys_param_epargne ADD COLUMN cpte_dormant_frais_tenue_cpte BOOLEAN;
			END IF;

			-- ADD column active_compte_sur_transaction in table adsys_param_epargne
			IF NOT EXISTS(SELECT * FROM information_schema.columns WHERE table_name = 'adsys_param_epargne' AND column_name = 'active_compte_sur_transaction') THEN
				ALTER TABLE adsys_param_epargne ADD COLUMN active_compte_sur_transaction BOOLEAN;
			END IF;

			-- ADD column passage_etat_inactif in table adsys_produit_epargne
			IF NOT EXISTS(SELECT * FROM information_schema.columns WHERE table_name = 'adsys_produit_epargne' AND column_name = 'passage_etat_inactif') THEN
				ALTER TABLE adsys_produit_epargne ADD COLUMN passage_etat_inactif BOOLEAN;
			END IF;

			-- ADD row cpte_dormant_nbre_jour in table d_tableliste related to table adsys_param_epargne
			tableliste_id := (SELECT ident FROM tableliste WHERE nomc = 'adsys_param_epargne');
			id_str_trad := maketraductionlangsyst('Nombre de jour sans mouvement pour les comptes inactifs');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'cpte_dormant_nbre_jour' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident)
				from d_tableliste)+1, tableliste_id, 'cpte_dormant_nbre_jour', id_str_trad,
				true, null, 'txt', true, null, FALSE);

				IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
					INSERT INTO ad_traductions (id_str, langue, traduction) VALUES (id_str_trad, 'en_GB', 'Number of days without movement for inactive accounts');
				END IF;
			END IF;

			-- ADD row cpte_dormant_frais_tenue_cpte in table d_tableliste related to table adsys_param_epargne
			tableliste_id := (SELECT ident FROM tableliste WHERE nomc = 'adsys_param_epargne');
			id_str_trad := maketraductionlangsyst('Inclure les frais de tenue de comptes pour les comptes inactifs?');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'cpte_dormant_frais_tenue_cpte' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident)
				from d_tableliste)+1, tableliste_id, 'cpte_dormant_frais_tenue_cpte', id_str_trad,
				true, null, 'bol', null, FALSE, FALSE);

				IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
					INSERT INTO ad_traductions (id_str, langue, traduction) VALUES (id_str_trad, 'en_GB', 'Include account maintenance fees for inactive accounts');
				END IF;
			END IF;

			-- ADD row active_compte_sur_transaction in table d_tableliste related to table adsys_param_epargne
			tableliste_id := (SELECT ident FROM tableliste WHERE nomc = 'adsys_param_epargne');
			id_str_trad := maketraductionlangsyst('Pour un compte dormant/ inactif, seulement un dépôt/retrait effectué par le titulaire/ou mandataire rend le compte actif ?');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'active_compte_sur_transaction' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident)
				from d_tableliste)+1, tableliste_id, 'active_compte_sur_transaction', id_str_trad,
				true, null, 'bol', null, FALSE, FALSE);

				IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
					INSERT INTO ad_traductions (id_str, langue, traduction) VALUES (id_str_trad, 'en_GB', 'For a dormant / inactive account, only a deposit / withdrawal made by the holder / or agent makes the account active ?');
				END IF;
			END IF;


			-- ADD row passage_etat_inactif in table d_tableliste related to table adsys_produit_epargne
			tableliste_id := (SELECT ident FROM tableliste WHERE nomc = 'adsys_produit_epargne');
			id_str_trad := maketraductionlangsyst('Passage à état inactif');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'passage_etat_inactif' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident)
				from d_tableliste)+1, tableliste_id, 'passage_etat_inactif', id_str_trad,
				false, null, 'bol', false, FALSE, FALSE);

				IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
					INSERT INTO ad_traductions (id_str, langue, traduction) VALUES (id_str_trad, 'en_GB', 'Change to inactive state');
				END IF;
			END IF;


			-- ADD data for the creation of the operation 171
			IF NOT EXISTS(SELECT * FROM ad_cpt_ope WHERE type_operation = 171 AND categorie_ope = 1 AND id_ag = numagc()) THEN
				INSERT INTO ad_cpt_ope(type_operation, categorie_ope, id_ag, libel_ope) VALUES (171, 1, numagc(), maketraductionlangsyst('Déclasser les comptes inactifs'));
				RAISE NOTICE 'Insertion type_operation 171 dans la table ad_cpt_ope effectuée';
			END IF;

			-- ADD data for the creation of the operation 171
			IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation = 171 AND sens = 'd' AND categorie_cpte = 1 AND id_ag = numagc()) THEN
				INSERT INTO ad_cpt_ope_cptes VALUES (171, NULL, 'd', 1,numagc());
				RAISE NOTICE 'Insertion type_operation 171 sens ''d'' dans la table ad_cpt_ope_cptes effectuée';
			END IF;

			-- ADD data for the creation of the operation 171
			IF NOT EXISTS(SELECT * FROM ad_cpt_ope_cptes WHERE type_operation = 171 AND sens = 'c' AND categorie_cpte = 0 AND id_ag = numagc()) THEN
				INSERT INTO ad_cpt_ope_cptes VALUES (171, NULL, 'c', 0,numagc());
				RAISE NOTICE 'Insertion type_operation 171 sens ''d'' dans la table ad_cpt_ope_cptes effectuée';
			END IF;

			-- Creates adsys_type_mode_calcul_frais_dormant in tableliste and d_tableliste
			tableliste_epargne := (SELECT ident FROM tableliste WHERE nomc = 'adsys_produit_epargne');

			IF NOT EXISTS(SELECT * FROM tableliste WHERE nomc = 'adsys_type_mode_calcul_frais_dormant') THEN
				INSERT INTO tableliste VALUES ((select max(ident) from tableliste)+1, 'adsys_type_mode_calcul_frais_dormant', makeTraductionLangSyst('"Mode de calcul des frais de tenu de comptes sur les comptes dormants"'), false);
				RAISE NOTICE 'Données table adsys_type_mode_calcul_frais_dormant rajoutés dans table tableliste';
			END IF;

			tableliste_id := (SELECT ident FROM tableliste WHERE nomc = 'adsys_type_mode_calcul_frais_dormant');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'id' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_id, 'id', makeTraductionLangSyst('Id'), true, NULL, 'int', null, true, false);
			END IF;

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'libel' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_id, 'libel', makeTraductionLangSyst('Libel'), true, NULL, 'txt', true, null, false);
			END IF;

			id_str_trad := makeTraductionLangSyst('Mode de calcul des frais de tenu de comptes sur les comptes dormants');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'mode_calcul_frais_dormant' and tablen = tableliste_epargne) THEN
				ALTER TABLE adsys_produit_epargne ADD COLUMN mode_calcul_frais_dormant integer DEFAULT 3;
				INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_epargne, 'mode_calcul_frais_dormant', id_str_trad, NULL, (SELECT ident from d_tableliste where tablen = tableliste_id and nchmpc = 'id' ), 'lsb', true, false, false);
				IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
					INSERT INTO ad_traductions VALUES (id_str_trad,'en_GB','Method of calculating account maintenance fees on dormant accounts');
				END IF;
			END IF;

			-- Creates adsys_type_mode_calcul_frais_inactif in tableliste and d_tableliste
			IF NOT EXISTS(SELECT * FROM tableliste WHERE nomc = 'adsys_type_mode_calcul_frais_inactif') THEN
				INSERT INTO tableliste VALUES ((select max(ident) from tableliste)+1, 'adsys_type_mode_calcul_frais_inactif', makeTraductionLangSyst('"Mode de calcul des frais de tenu de comptes sur les comptes inactifs"'), false);
				RAISE NOTICE 'Données table adsys_type_mode_calcul_frais_inactif rajoutés dans table tableliste';
			END IF;

			tableliste_id := (SELECT ident FROM tableliste WHERE nomc = 'adsys_type_mode_calcul_frais_inactif');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'id' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_id, 'id', makeTraductionLangSyst('Id'), true, NULL, 'int', null, true, false);
			END IF;

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'libelle' and tablen = tableliste_id) THEN
				INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_id, 'libelle', makeTraductionLangSyst('Libelle'), true, NULL, 'txt', true, null, false);
			END IF;

			id_str_trad := makeTraductionLangSyst('Mode de calcul des frais de tenu de comptes sur les comptes inactifs');

			IF NOT EXISTS(SELECT * FROM d_tableliste WHERE nchmpc = 'mode_calcul_frais_inactif' and tablen = tableliste_epargne) THEN
				ALTER TABLE adsys_produit_epargne ADD COLUMN mode_calcul_frais_inactif integer DEFAULT 3;
				INSERT INTO d_tableliste VALUES ((select max(ident) from d_tableliste)+1, tableliste_epargne, 'mode_calcul_frais_inactif', id_str_trad, NULL, (SELECT ident from d_tableliste where tablen = tableliste_id and nchmpc = 'id' ), 'lsb', true, false, false);
				IF EXISTS(SELECT langue FROM adsys_langues_systeme WHERE code = 'en_GB') THEN
					INSERT INTO ad_traductions VALUES (id_str_trad,'en_GB','Method of calculating account maintenance fees on inactive accounts');
				END IF;
			END IF;


		RETURN output_result;
		END;
		$$
		LANGUAGE plpgsql;

	SELECT script_at_145();
	DROP FUNCTION script_at_145();

CREATE OR REPLACE FUNCTION prelevefraistenuecptbnr(
	integer,
	text,
	integer,
	text,
	text)
	RETURNS SETOF cpte_frais AS
	$BODY$

	DECLARE
	cur_date TIMESTAMP;
	freq_tenue_cpt ALIAS FOR $1;
	date_prelev ALIAS FOR $2;
	num_ope ALIAS FOR $3;
	jou1	INTEGER;	               -- id du journal associé au compte au débit s'il est principal
	jou2	INTEGER;	               -- id du journal associé au compte au crédit s'il est principal
	id_journal	INTEGER;	       -- id du journal des mouvements comptables
	nbre_devises	INTEGER;	       -- Nombre de devises créées
	mode_multidev	BOOLEAN;	       -- Mode multidevise ?
	devise_cpte_cr CHAR(3);		       -- Code de la devise du compte au crédit
	code_dev_ref CHAR(3);		       -- Code de la devise de référence
	devise_cpte_debit CHAR(3);	       -- Code de la devise du compte comptable associé au produit d'épargne
	cpt_pos_ch TEXT;		       -- Compte de position de change de la devise du compte traité
	cpt_cv_pos_ch TEXT;		       -- Compte de C/V de la Pos de Ch de la devise du compte traité
	cv_frais_tenue_cpte NUMERIC(30,6);     -- C/V des frais de tenue de compte
	num_cpte_debit TEXT;		       -- Compte comptable à débiter
	cpte_liaison TEXT;                     -- Compte de liaison si les deux comptes à mouvementer sont principaux
	devise_cpte_liaison CHAR(3);		       -- Code de la devise de référence
	infos_cpte RECORD;                    -- array contenant quelques informations du compte traité
	compte_frais cpte_frais;	       -- array contenant l'id, le solde et les frais des comptes traités
	exo RECORD; -- infos sur l'exercice contenant la date de prélèvement des frais
	type_ope RECORD; -- infos sur l'opérationn de prélèvement des frais

	v_info_tax RECORD;			-- array contenant les infos de la taxe associe a l'operation comptable
	v_mnt_tax NUMERIC(30,6) = 0;		-- Le montant tax calculé sur frais de tenue
	v_sens_tax ALIAS FOR $4;		-- Sens Tax pour mouvement comptables
	v_reglementTax INTEGER;			-- Pour la fonction reglementTaxFraisTenue
	v_scenario INTEGER;			-- Les differents scenarios prelevement frais tenue
	mode_calcule_frais INTEGER;

	v_id_agc INTEGER;                       -- L'id agence

	appl_frais_gs ALIAS FOR $5;             -- champ parametrable de la table agence : si c'est 't' (true) on va prelever les frais de tenue des comptes sur les membres des groups solidaires

	-- Recupere des infos sur les compte épargne à prélever et leurs produits associés
	Cpt_Prelev refcursor;
	/*Cpt_Prelev CURSOR FOR
		SELECT a.id_cpte, a.id_titulaire,a.solde, a.devise, a.num_complet_cpte, b.frais_tenue_cpt as total_frais_tenue_cpt, b.cpte_cpta_prod_ep
		FROM ad_cpt a, adsys_produit_epargne b WHERE a.id_ag=b.id_ag AND a.id_ag=v_id_agc AND a.id_prod = b.id AND (frequence_tenue_cpt BETWEEN 1 AND freq_tenue_cpt)
		AND a.etat_cpte in (1,4) AND b.frais_tenue_cpt > 0 ORDER BY a.id_titulaire;*/

	ligne RECORD;

	ligne_ad_cpt ad_cpt%ROWTYPE;

	cpte_base INTEGER;

	solde_dispo_cpte NUMERIC(30,6);

	BEGIN

	-- Recuperation l'id de l'agence
	v_id_agc := numagc();

	-- Récupération infos taxe associe a l'operation comptable
	SELECT INTO v_info_tax t.id, t.taux FROM ad_oper_taxe opt INNER JOIN adsys_taxes t ON opt.id_taxe = t.id WHERE opt.id_ag = t.id_ag AND t.id_ag = v_id_agc AND opt.type_oper = num_ope;
	--RAISE NOTICE 'Id = % Taux de Tax = % ',v_info_tax.id, v_info_tax.taux;

	-- Recherche du libellé et du compte au crédit de type opération
	SELECT INTO type_ope libel_ope , num_cpte FROM ad_cpt_ope a, ad_cpt_ope_cptes b WHERE a.id_ag=b.id_ag AND a.id_ag=v_id_agc AND a.type_operation = num_ope AND a.type_operation=b.type_operation AND b.sens = 'c';
	--RAISE NOTICE 'Libel Operation % - Compte au Crédit %',type_ope.libel_ope,type_ope.num_cpte;

	-- Récupération de la devise du compte au crédit
	SELECT INTO devise_cpte_cr devise FROM ad_cpt_comptable WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'Devise du compte au credit = %',devise_cpte_cr;

	-- Récupération du journal associé si le compte au crédit est principal
	SELECT INTO jou2 recupeJournal(type_ope.num_cpte);
	--RAISE NOTICE 'Journal associé si le compte au crédit est principal = %',jou2;

	-- Recherche du numéro de l'exercice contenant la date de prélèvement
	SELECT INTO exo id_exo_compta FROM ad_exercices_compta WHERE id_ag=v_id_agc AND date_deb_exo<= date(date_prelev) AND date_fin_exo >= date(date_prelev);

	-- Récupération du nombre de devises
	SELECT INTO nbre_devises count(*) from devise WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'Nombre devise = %',nbre_devises;

	IF nbre_devises = 1 THEN
	mode_multidev := false;
	ELSE
	mode_multidev := true;
	END IF;
	--RAISE NOTICE 'Is multi devise = %',mode_multidev;

	-- Récupération de la devise de référence
	SELECT INTO code_dev_ref code_devise_reference FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'Devise de reference = %',code_dev_ref;

	cur_date := 'now';

	IF appl_frais_gs = 'f' THEN -- Pour tous les comptes epargne avec etat_cpte in (1,4) comme se faisait normalement
	-- Recupere des infos sur les compte épargne à prélever et leurs produits associés
	OPEN Cpt_Prelev FOR
	SELECT a.id_cpte, a.id_titulaire,a.solde, a.devise, a.num_complet_cpte, b.frais_tenue_cpt as total_frais_tenue_cpt, b.cpte_cpta_prod_ep,
		b.mode_calcul_frais_inactif, b.mode_calcul_frais_dormant, a.etat_cpte
	FROM ad_cpt a, adsys_produit_epargne b WHERE a.id_ag=b.id_ag AND a.id_ag=v_id_agc AND a.id_prod = b.id AND (frequence_tenue_cpt BETWEEN 1 AND freq_tenue_cpt)
																							 AND a.etat_cpte in (1,4,8) AND b.frais_tenue_cpt > 0 ORDER BY a.id_titulaire;
	--RAISE NOTICE 'appl_frais_gs = f';
	ELSE -- Pour tous les comptes epargne avec etat_cpte in (1,4) autre que les membres des groupes solidaires (Ticket AT-40)
	-- Recupere des infos sur les compte épargne à prélever et leurs produits associés
	OPEN Cpt_Prelev FOR
	SELECT a.id_cpte, a.id_titulaire, a.solde, a.devise, a.num_complet_cpte, b.frais_tenue_cpt as total_frais_tenue_cpt, b.cpte_cpta_prod_ep,
		b.mode_calcul_frais_inactif, b.mode_calcul_frais_dormant, a.etat_cpte
	FROM ad_cpt a, adsys_produit_epargne b WHERE a.id_ag=b.id_ag AND a.id_ag=v_id_agc AND a.id_prod = b.id AND (frequence_tenue_cpt BETWEEN 1 AND freq_tenue_cpt)
																							 AND a.etat_cpte in (1,4,8) AND a.id_titulaire NOT IN (SELECT id_membre FROM ad_grp_sol) AND b.frais_tenue_cpt > 0 ORDER BY a.id_titulaire;
	--RAISE NOTICE 'appl_frais_gs = t';
	END IF;
	--EXIT; for testing purpose only

	FETCH Cpt_Prelev INTO ligne;

	-- Ajout historique à condition qu'on ait trouvé des comptes à traiter
	-- On utilise la date de prélèvement (qui est normalement la date pour laquelle on exécute le batch),
	-- et la dernière minute de la journée, afin
	IF FOUND THEN
	INSERT INTO ad_his (type_fonction, login, infos, date, id_ag)
	VALUES (212, 'admin','Prelevement des frais de tenue de compte via batch', date(now()), v_id_agc);
	--RAISE NOTICE 'ajout historique!';
	END IF;


	WHILE FOUND LOOP

	--calculer le tax sur frais de tenue si necessaire
	IF v_info_tax.id IS NOT NULL THEN
	v_mnt_tax := v_info_tax.taux * ligne.total_frais_tenue_cpt;
	END IF;
	--RAISE NOTICE '==> Montant Tax Calculé = [ % ]',v_mnt_tax;

	--calculer le solde disponible du compte en enlevant les frais de tenue + tax sur frais de tenue

	SELECT INTO solde_dispo_cpte(solde - mnt_bloq - mnt_min_cpte + decouvert_max - mnt_bloq_cre - ligne.total_frais_tenue_cpt - v_mnt_tax)
	FROM ad_cpt WHERE id_ag=v_id_agc AND id_cpte = ligne.id_cpte;

	--RAISE NOTICE 'Solde dispo pour compte % avec solde initial % = %', ligne.id_cpte, ligne.solde, solde_dispo_cpte;

	IF (ligne.etat_cpte = 4) THEN
	mode_calcule_frais := ligne.mode_calcul_frais_dormant;
	ELSIF (ligne.etat_cpte = 8) THEN
	mode_calcule_frais := ligne.mode_calcul_frais_inactif;
	END IF;

	IF (solde_dispo_cpte >= 0 AND mode_calcule_frais <> 1) THEN

	-- RECUPERATION DE LA DEVISE DU COMPTE ASSOCIE AU PRODUIT
	SELECT INTO devise_cpte_debit devise FROM ad_cpt_comptable WHERE id_ag=v_id_agc AND num_cpte_comptable = ligne.cpte_cpta_prod_ep;
	--RAISE NOTICE 'DEVISE DU COMPTE ASSOCIE AU PRODUIT = %',devise_cpte_debit;

	-- Construction du numéro de compte à débiter
	IF devise_cpte_debit IS NULL THEN
	num_cpte_debit := ligne.cpte_cpta_prod_ep || '.' || ligne.devise;
	ELSE
	num_cpte_debit := ligne.cpte_cpta_prod_ep;
	END IF;
	--RAISE NOTICE 'numéro de compte à débiter = %',num_cpte_debit;

	-- Récupération du journal associé si le compte est principal
	SELECT INTO jou1 recupeJournal(num_cpte_debit);
	--RAISE NOTICE 'Journal associé si le compte est principal = %',jou1;

	IF jou1 IS NOT NULL AND jou2 IS NOT NULL AND jou1 != jou2 THEN
	--RAISE NOTICE '---------------------------------IF jou1 is not null and jou2 is not null and jou1 != jou2--------------------------------';

	-- num_cpte_debit ET COMPTE AU CREDIT SONT PINCIPAUX ET DE JOURNAUX DIFFERENTS , ON RECUPERE ALORS LE COMPTE DE LIAISON

	SELECT INTO cpte_liaison num_cpte_comptable FROM ad_journaux_liaison WHERE (id_ag=v_id_agc AND id_jou1=jou1 AND id_jou2=jou2) OR (id_jou1=jou2 AND id_jou2=jou1);
	--RAISE NOTICE 'Compte de liason entre journal % et journal %  est %', jou1, jou2, cpte_liaison;

	-- DEVISE DU COMPTE DE LIAISON
	SELECT INTO devise_cpte_liaison devise FROM ad_cpt_comptable WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'Devise du compte de liason : % ', devise_cpte_liaison;


	---------- DEBIT COMPTE CLIENT PAR CREDIT DU COMPTE DE LIAISON -----------------------
	IF ligne.devise = devise_cpte_liaison THEN  ----- num_cpte_debit et cpte_liaison sont de la même devise
	--RAISE NOTICE 'num_cpte_debit % et cpte_liaison % sont de la même devise',ligne.devise,devise_cpte_liaison;

	-- prelevement des frais sur le compte du client
	UPDATE ad_cpt SET solde = solde - ligne.total_frais_tenue_cpt WHERE (id_cpte = ligne.id_cpte);
	--RAISE NOTICE 'prelevement des frais sur le compte du client';

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou1,
					exo.id_exo_compta, makeNumEcriture(jou1, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	-- Mouvement comptable au débit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,num_cpte_debit,ligne.id_cpte, 'd', ligne.total_frais_tenue_cpt, ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit';

	-- Mouvement comptable au crédit
	INSERT INTO ad_mouvement (id_ecriture,id_ag,compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpte_liaison, NULL, 'c', ligne.total_frais_tenue_cpt,ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit';

	-- Mise à jour des soldes comptables
	UPDATE ad_cpt_comptable set solde = solde - ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = num_cpte_debit;
	UPDATE ad_cpt_comptable set solde = solde + ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'Mise à jour des soldes comptables';


	ELSE --------- num_cpte_debit et cpte_liaison n'ont pas la même devise, faire la conversion
	--RAISE NOTICE 'num_cpte_debit % et cpte_liaison % nont pas la même devise, faire la conversion',ligne.devise,devise_cpte_liaison;

	--------- si num_cpte_debit a la devise de référence et cpte_liaison une devise étrangère
	IF ligne.devise = code_dev_ref THEN
	--RAISE NOTICE ' debut si num_cpte_debit a la devise de référence et cpte_liaison une devise étrangère';

	SELECT INTO cpt_pos_ch cpte_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'cpt_pos_ch = % cpt_cv_pos_ch = %',cpt_pos_ch,cpt_cv_pos_ch;

	-- prelevement des frais sur le compte du client
	UPDATE ad_cpt SET solde = solde - ligne.total_frais_tenue_cpt WHERE (id_cpte = ligne.id_cpte AND id_ag=v_id_agc);
	--RAISE NOTICE 'prelevement des frais sur le compte du client';

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou1, exo.id_exo_compta, makeNumEcriture(jou1, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	-- Mouvement comptable au débit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,num_cpte_debit,ligne.id_cpte, 'd', ligne.total_frais_tenue_cpt, ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit';

	-- Mouvement comptable au crédit de la c/v du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch, NULL, 'c', ligne.total_frais_tenue_cpt,ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit de la c/v du compte de liaison';

	-- montant dans la devise du compte de liaison
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_liaison);
	--RAISE NOTICE 'montant dans la devise du compte de liaison = %',cv_frais_tenue_cpte;

	-- Mouvement comptable au débit de la position de change du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_pos_ch,NULL, 'd', cv_frais_tenue_cpte,devise_cpte_liaison,date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit de la position de change du compte de liaison';

	-- Mouvement comptable au crédit du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpte_liaison ,NULL, 'c',cv_frais_tenue_cpte, devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit du compte de liaison';

	-- Mise à jour des soldes comptables
	UPDATE ad_cpt_comptable set solde = solde - ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = num_cpte_debit;
	UPDATE ad_cpt_comptable set solde = solde + ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'Mise à jour des soldes comptables';

	--RAISE NOTICE ' fin si num_cpte_debit a la devise de référence et cpte_liaison une devise étrangère';

	END IF; -- FIN IF ligne.devise = code_dev_ref

	-------- si cpte_liaison a la devise de référence et num_cpte_debit une devise étrangère
	IF devise_cpte_liaison = code_dev_ref THEN
	--RAISE NOTICE ' debut si cpte_liaison a la devise de référence et num_cpte_debit une devise étrangère';

	SELECT INTO cpt_pos_ch cpte_position_change || '.' || ligne.devise FROM ad_agc WHERE id_ag=v_id_agc;
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || ligne.devise FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'cpt_pos_ch = % cpt_cv_pos_ch = % ',cpt_pos_ch,cpt_cv_pos_ch;

	-- prelevement des frais sur le compte du client
	UPDATE ad_cpt SET solde = solde - ligne.total_frais_tenue_cpt WHERE (id_ag=v_id_agc AND id_cpte = ligne.id_cpte);
	--RAISE NOTICE 'prelevement des frais sur le compte du client';

	-- montant dans la devise du compte de liaison
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, code_dev_ref);
	--RAISE NOTICE 'montant dans la devise du compte de liaison = %',cv_frais_tenue_cpte;

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou1,
					exo.id_exo_compta, makeNumEcriture(jou1, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	-- Mouvement comptable au crédit du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpte_liaison ,NULL, 'c',cv_frais_tenue_cpte,
					code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit du compte de liaison';

	-- Mouvement comptable au débit de la c/v de num_cpte_debit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_cv_pos_ch ,NULL, 'd',cv_frais_tenue_cpte,
					code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit de la c/v de num_cpte_debit';

	-- Mouvement comptable au débit de num_cpte_debit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,num_cpte_debit,ligne.id_cpte, 'd',
					ligne.total_frais_tenue_cpt, ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit de num_cpte_debit';

	-- Mouvement comptable au crédit de la position de change de num_cpte_debit
	INSERT INTO ad_mouvement (id_ecriture,id_ag,compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_pos_ch,NULL, 'c', ligne.total_frais_tenue_cpt,
					ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit de la position de change de num_cpte_debit';

	-- Mise à jour des soldes comptables
	UPDATE ad_cpt_comptable set solde = solde - ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = num_cpte_debit;
	UPDATE ad_cpt_comptable set solde = solde + ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'Mise à jour des soldes comptables';

	--RAISE NOTICE ' fin si cpte_liaison a la devise de référence et num_cpte_debit une devise étrangère';

	END IF; -- FIN IF devise_cpte_liaison = code_dev_ref

	-------- si ni cpte_liaison ni num_cpte_debit n'a la devise de référence
	IF ligne.devise != code_dev_ref AND devise_cpte_liaison != code_dev_ref THEN
	--RAISE NOTICE ' debut si ni cpte_liaison ni num_cpte_debit na la devise de référence';

	-- prelevement des frais sur le compte du client
	UPDATE ad_cpt SET solde = solde - ligne.total_frais_tenue_cpt WHERE (id_ag=v_id_agc AND id_cpte = ligne.id_cpte);
	--RAISE NOTICE 'prelevement des frais sur le compte du client';

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou1, exo.id_exo_compta, makeNumEcriture(jou1, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	-- Mouvement comptable au débit de num_cpte_debit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,num_cpte_debit,ligne.id_cpte, 'd', ligne.total_frais_tenue_cpt, ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit de num_cpte_debit';

	UPDATE ad_cpt_comptable set solde = solde - ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = num_cpte_debit;
	--RAISE NOTICE 'set solde = solde - ligne.total_frais_tenue_cpt';

	-- position de change de la devise de num_cpte_debit
	SELECT INTO cpt_pos_ch cpte_position_change || '.' || ligne.devise FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'position de change de la devise de num_cpte_debit';

	-- Mouvement comptable au crédit de la position de change de num_cpte_debit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_pos_ch,NULL, 'c', ligne.total_frais_tenue_cpt, ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit de la position de change de num_cpte_debit';

	UPDATE ad_cpt_comptable set solde = solde + ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'set solde = solde + ligne.total_frais_tenue_cpt';

	-- montant dans la devise de référence
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, code_dev_ref);
	--RAISE NOTICE 'montant dans la devise de référence = %',cv_frais_tenue_cpte;

	-- c/v de la devise de num_cpte_debit
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || ligne.devise FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'c/v de la devise de num_cpte_debit = %',cpt_cv_pos_ch;

	-- Mouvement comptable au débit de la c/v de num_cpte_debit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch,NULL, 'd', cv_frais_tenue_cpte, code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit de la c/v de num_cpte_debit';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- c/v de la devise du compte de liaison
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'c/v de la devise du compte de liaison = %',cpt_cv_pos_ch;

	-- Mouvement comptable au crédit de la c/v du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch, NULL, 'c', cv_frais_tenue_cpte, code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit de la c/v du compte de liaison';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	-- montant dans la devise du compte de liaison
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_liaison);
	--RAISE NOTICE 'montant dans la devise du compte de liaison = %',cv_frais_tenue_cpte;

	-- Mouvement comptable au crédit du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpte_liaison, NULL, 'c', cv_frais_tenue_cpte, devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit du compte de liaison';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	-- position de change de la devise du compte de liaison
	SELECT INTO cpt_pos_ch cpte_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'position de change de la devise du compte de liaison = %',cpt_pos_ch;

	-- Mouvement comptable au débit de la position de change de la devise du compte de liaison
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_pos_ch, NULL, 'd', cv_frais_tenue_cpte, devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit de la position de change de la devise du compte de liaison';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	--RAISE NOTICE ' fin si ni cpte_liaison ni num_cpte_debit na la devise de référence';

	END IF; -- FIN IF ligne.devise != code_dev_ref AND devise_cpte_liaison != code_dev_ref

	--RAISE NOTICE 'FIN  IF ligne.devise = devise_cpte_liaison';

	END IF;  -- FIN  IF ligne.devise = devise_cpte_liaison

	----------- FIN DEBIT COMPTE CLIENT PAR CREDIT COMPTE DE LIAISON -----------------------
	--RAISE NOTICE '----------- FIN DEBIT COMPTE CLIENT PAR CREDIT COMPTE DE LIAISON -----------------------';


	----------- DEBIT COMPTE DE LIAISON PAR CREDIT COMPTE AU CREDIT DANS LE SECOND JOURNAL ------------------------
	--RAISE NOTICE '----------- DEBIT COMPTE DE LIAISON PAR CREDIT COMPTE AU CREDIT DANS LE SECOND JOURNAL ------------------------';

	IF devise_cpte_liaison = devise_cpte_cr THEN  ----- COMPTE AU CREDIT ET cpte_liaison SONT DE LA MEME DEVISE
	--RAISE NOTICE 'COMPTE AU CREDIT ET cpte_liaison SONT DE LA MEME DEVISE';

	-- MONTANT DANS LA DEVISE DU COMPTE DE LIASON
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_liaison);
	--RAISE NOTICE 'MONTANT DANS LA DEVISE DU COMPTE DE LIASON = %',cv_frais_tenue_cpte;

	-- PASSAGE ECRITURE COMPTABLE
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc,date(date_prelev), type_ope.libel_ope, jou2,
					exo.id_exo_compta, makeNumEcriture(jou2, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'PASSAGE ECRITURE COMPTABLE';

	-- MOUVEMENT COMPTABLE AU DEBIT DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpte_liaison,NULL,'d',cv_frais_tenue_cpte,
					devise_cpte_liaison,date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU DEBIT DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- MOUVEMENT COMPTABLE AU CREDIT DU COMPTE DE CREDIT
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,type_ope.num_cpte,NULL,'c',cv_frais_tenue_cpte,
					devise_cpte_cr,date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DU COMPTE DE CREDIT';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';


	ELSE      ----- COMPTE AU CREDIT ET cpte_liaison N'ONT PAS LA MEME DEVISE , FAIRE DONC LA CONVERSION
	--RAISE NOTICE 'COMPTE AU CREDIT ET cpte_liaison NONT PAS LA MEME DEVISE , FAIRE DONC LA CONVERSION';

	IF devise_cpte_liaison = code_dev_ref THEN  -- CPTE DE LIAISON A LA DEVISE DE REFERENCE ET CPTE AU CREDIT DEVISE ETRANGERE
	--RAISE NOTICE 'CPTE DE LIAISON A LA DEVISE DE REFERENCE ET CPTE AU CREDIT DEVISE ETRANGERE';

	SELECT INTO cpt_pos_ch cpte_position_change || '.' || devise_cpte_cr FROM ad_agc WHERE id_ag=v_id_agc;
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || devise_cpte_cr FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'cpt_pos_ch = % cpt_cv_pos_ch = % ',cpt_pos_ch,cpt_cv_pos_ch;

	-- MONTANT DANS LA DEVISE DU COMPTE DE LIASON (DEVISE DE REFERENCE )
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_liaison);
	--RAISE NOTICE 'MONTANT DANS LA DEVISE DU COMPTE DE LIASON (DEVISE DE REFERENCE ) = %',cv_frais_tenue_cpte;

	-- PASSAGE ECRITURE COMPTABLE
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou2,
					exo.id_exo_compta, makeNumEcriture(jou2, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'PASSAGE ECRITURE COMPTABLE';

	-- MOUVEMENT AU DEBIT DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpte_liaison, NULL, 'd', cv_frais_tenue_cpte,
					devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT AU DEBIT DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- MOUVEMENT COMPTABLE AU CREDIT DE LA c/v DU COMPTE DE CREDIT DE L'OPERATION
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch, NULL, 'c', cv_frais_tenue_cpte,
					code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DE LA c/v DU COMPTE DE CREDIT DE LOPERATION';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';


	-- MONTANT DANS LA DEVISE DU COMPTE DE CREDIT DE L'OPERATION
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_cr);
	--RAISE NOTICE 'MONTANT DANS LA DEVISE DU COMPTE DE CREDIT DE LOPERATION';

	-- MOUVEMENT COMPTABLE AU DEBIT DE LA POSITION DE CHANGE DU COMPTE AU CREDIT DE L'OPERATION
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_pos_ch, NULL, 'd', cv_frais_tenue_cpte,
					devise_cpte_cr,date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU DEBIT DE LA POSITION DE CHANGE DU COMPTE AU CREDIT DE LOPERATION';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- MOUVEMENT COMPTABLE AU CREDIT DU COMPTE DE CREDIT DE L'OPERATION
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, type_ope.num_cpte , NULL, 'c',cv_frais_tenue_cpte,
					devise_cpte_cr, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DU COMPTE DE CREDIT DE LOPERATION';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	--RAISE NOTICE 'FIN IF devise_cpte_liaison = code_dev_ref';

	END IF; -- FIN IF devise_cpte_liaison = code_dev_ref


	IF devise_cpte_cr = code_dev_ref THEN -- SI CPTE AU CREDIT A LA DEVISE DE REFERENCE ET CPTE LIAISON UNE DEVISE ETRANGERE
	--RAISE NOTICE 'SI CPTE AU CREDIT A LA DEVISE DE REFERENCE ET CPTE LIAISON UNE DEVISE ETRANGERE';

	SELECT INTO cpt_pos_ch cpte_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'cpt_pos_ch = % cpt_cv_pos_ch = %',cpt_pos_ch,cpt_cv_pos_ch;

	-- PASSAGE ECRITURE COMPTABLE
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou2,
					exo.id_exo_compta, makeNumEcriture(jou2, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'PASSAGE ECRITURE COMPTABLE';

	-- MONATANT DANS LA DEVISE DU COMPTE AU CREDIT DE L'OPERATION ( DEVISE DE REFERENCE )
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_cr);
	--RAISE NOTICE 'MONATANT DANS LA DEVISE DU COMPTE AU CREDIT DE LOPERATION ( DEVISE DE REFERENCE ) = %',cv_frais_tenue_cpte;

	-- MOUVEMENT AU CREDIT DU COMPTE DE CREDIT DE L'OPERATION
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,type_ope.num_cpte ,NULL, 'c',cv_frais_tenue_cpte,
					devise_cpte_cr, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT AU CREDIT DU COMPTE DE CREDIT DE LOPERATION';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	-- MOUVEMENT AU DEBIT DE LA c/v DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_cv_pos_ch ,NULL, 'd',cv_frais_tenue_cpte,
					code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT AU DEBIT DE LA c/v DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- MONATANT DANS LA DEVISE DU COMPTE DE LIAISON
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_liaison);
	--RAISE NOTICE 'MONATANT DANS LA DEVISE DU COMPTE DE LIAISON = %',cv_frais_tenue_cpte;

	-- MOUVEMENT COMPTABLE AU DEBIT DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpte_liaison, NULL, 'd', cv_frais_tenue_cpte,
					devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU DEBIT DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- MOUVEMENT COMPTABLE AU CREDIT DA LA POSITION DE CHANGE DE LA DEVISE DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,cpt_pos_ch, NULL, 'c', cv_frais_tenue_cpte,
					devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DA LA POSITION DE CHANGE DE LA DEVISE DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	--RAISE NOTICE 'FIN IF devise_cpte_cr = code_dev_ref';

	END IF; -- FIN IF devise_cpte_cr = code_dev_ref

	IF devise_cpte_cr != code_dev_ref AND devise_cpte_liaison != code_dev_ref THEN

	-- DEVISE COMPTE DE LIAISON ET DEVISE COMPTE AU CREDIT SONT DIFFERENTES ET AUCUNE N'EST EGALE A LA DEVISE DE REFERENCE
	--RAISE NOTICE 'DEVISE COMPTE DE LIAISON ET DEVISE COMPTE AU CREDIT SONT DIFFERENTES ET AUCUNE NEST EGALE A LA DEVISE DE REFERENCE';

	-- PASSAGE ECRITURE COMPTABLE DANS jou2
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, jou2,
					exo.id_exo_compta, makeNumEcriture(jou2, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'PASSAGE ECRITURE COMPTABLE DANS jou2';

	-- MONTANT DANS LA DEVISE DU COMPTE DE LIAISON
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_liaison);
	--RAISE NOTICE 'MONTANT DANS LA DEVISE DU COMPTE DE LIAISON = %',cv_frais_tenue_cpte;

	-- MOUVEMENT COMPTABLE AU DEBIT DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpte_liaison, NULL, 'd', cv_frais_tenue_cpte,
					devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU DEBIT DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpte_liaison;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- POSITION DE CHANGE DE LA DEVISE DU COMPTE DE LIAISON
	SELECT INTO cpt_pos_ch cpte_position_change || '.' || devise_cpte_liaison FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'POSITION DE CHANGE DE LA DEVISE DU COMPTE DE LIAISON';

	-- MOUVEMENT COMPTABLE AU CREDIT DE LA POSITION DE CHANGE DE LA DEVISE DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_pos_ch, NULL, 'c', cv_frais_tenue_cpte,
					devise_cpte_liaison, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DE LA POSITION DE CHANGE DE LA DEVISE DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	-- MONATNT DANS LA DEVISE DE REFERENCE
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, code_dev_ref);
	--RAISE NOTICE 'MONATNT DANS LA DEVISE DE REFERENCE = %',cv_frais_tenue_cpte;

	-- c/v DE LA DEVISE DU COMPTE DE LIAISON
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || devise_cpte_liaison FROM ad_agc;
	--RAISE NOTICE 'c/v DE LA DEVISE DU COMPTE DE LIAISON = %',cpt_cv_pos_ch;

	-- MOUVEMENT COMPTABLE AU DEBIT DE LA c/v DE LA DEVISE DU COMPTE DE LIAISON
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch,NULL, 'd', cv_frais_tenue_cpte, code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU DEBIT DE LA c/v DE LA DEVISE DU COMPTE DE LIAISON';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	-- c/v DE LA DEVISE DU COMPTE AU CREDIT DE L'OPERATION
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || devise_cpte_cr FROM ad_agc;
	--RAISE NOTICE 'c/v DE LA DEVISE DU COMPTE AU CREDIT DE LOPERATION = %',cpt_cv_pos_ch;

	-- MOUVEMENT COMPTABLE AU CREDIT DE LA c/v DU COMPTE AU CREDIT DE L'OPERATION
	INSERT INTO ad_mouvement (id_ecriture, id_ag,compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch, NULL, 'c', cv_frais_tenue_cpte,
					code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DE LA c/v DU COMPTE AU CREDIT DE LOPERATION';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	-- MONTANT DANS LA DEVISE DU COMPTE DE CREDIT DE L'OPERATION
	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, devise_cpte_cr);
	--RAISE NOTICE 'MONTANT DANS LA DEVISE DU COMPTE DE CREDIT DE LOPERATION';

	-- MOUVEMENT COMPTABLE AU CREDIT DU COMPTE DE CREDIT D EL'OPERATION
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, type_ope.num_cpte, NULL, 'c', cv_frais_tenue_cpte,
					devise_cpte_cr, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU CREDIT DU COMPTE DE CREDIT D ELOPERATION';

	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'set solde = solde + cv_frais_tenue_cpte';

	-- POSITION DE CHANGE DE LA DEVISE DU COMPTE AU CREDIT DE L'OPERATION
	SELECT INTO cpt_pos_ch cpte_position_change || '.' || devise_cpte_cr FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'POSITION DE CHANGE DE LA DEVISE DU COMPTE AU CREDIT DE LOPERATION = %',cpt_pos_ch;

	-- MOUVEMENT COMPTABLE AU DEBIT DE LA POSITION DE CHANGE DE LA DEVISE DU COMPTE AU CREDIT D EL'OPERATION
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_pos_ch, NULL, 'd', cv_frais_tenue_cpte,
					devise_cpte_cr, date(date_prelev));
	--RAISE NOTICE 'MOUVEMENT COMPTABLE AU DEBIT DE LA POSITION DE CHANGE DE LA DEVISE DU COMPTE AU CREDIT D ELOPERATION';

	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'set solde = solde - cv_frais_tenue_cpte';

	--RAISE NOTICE 'FIN IF devise_cpte_cr != code_dev_ref AND devise_cpte_liaison != code_dev_ref';

	END IF; -- FIN IF devise_cpte_cr != code_dev_ref AND devise_cpte_liaison != code_dev_ref

	--RAISE NOTICE 'FIN  IF devise_cpte_cr = devise_cpte_liaison';

	END IF;  -- FIN  IF devise_cpte_cr = devise_cpte_liaison

	---------- FIN DEBIT COMPTE DE LIAISON PAR CREDIT COMPTEG AU CREDIT
	--RAISE NOTICE '---------- FIN DEBIT COMPTE DE LIAISON PAR CREDIT COMPTEG AU CREDIT';

	ELSE

	-- AU MOINS UN DES COMPTES N'EST PAS PRINCIPAL OU LES DEUX SONT PRINCIPAUX DU MEME JOURNAL: PAS BESOIN DONC DE COMPTE DE LIAISON
	--RAISE NOTICE 'AU MOINS UN DES COMPTES NEST PAS PRINCIPAL OU LES DEUX SONT PRINCIPAUX DU MEME JOURNAL: PAS BESOIN DONC DE COMPTE DE LIAISON';

	IF jou1 IS NULL AND jou2 IS NOT NULL THEN
	id_journal := jou2;
	END IF;

	IF jou1 IS NOT NULL AND jou2 IS NULL THEN
	id_journal := jou1;
	END IF;

	IF jou1 IS NOT NULL AND jou2 IS NOT NULL AND jou1=jou2 THEN
	id_journal := jou1;
	END IF;

	IF jou1 IS NULL AND jou2 IS NULL THEN
	id_journal := 1; -- Ecrire donc dans le joournal principal
	END IF;

	-- Vérifier que la devise du compte est la devise de référence
	--RAISE NOTICE 'Vérifier que la devise du compte est la devise de référence';
	IF ligne.devise = code_dev_ref THEN       -- Pas de change à effectuer
	--RAISE NOTICE 'Pas de change à effectuer';

	-- prelevement tax TVA sur frais de tenue
	v_scenario := 9; -- devise = code_dev_ref pas de change à effectuer
	v_reglementTax := reglementtaxfraistenue(num_cpte_debit, v_sens_tax, ligne.devise, id_journal, date_prelev, cpt_pos_ch, cpt_cv_pos_ch, ligne.id_cpte, exo.id_exo_compta, v_scenario, ligne.total_frais_tenue_cpt, code_dev_ref, num_ope, cpte_liaison);

	-- prelevement des frais sur le compte du client
	UPDATE ad_cpt SET solde = solde - ligne.total_frais_tenue_cpt WHERE (id_ag=v_id_agc AND id_cpte = ligne.id_cpte);
	--RAISE NOTICE 'prelevement des frais sur le compte du client';

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, id_journal, exo.id_exo_compta, makeNumEcriture(id_journal, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	-- Mouvement comptable au débit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,num_cpte_debit,ligne.id_cpte, 'd', ligne.total_frais_tenue_cpt, ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit';

	-- Mouvement comptable au crédit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, type_ope.num_cpte, NULL, 'c', ligne.total_frais_tenue_cpt,ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au crédit';

	-- Mise à jour des soldes comptables
	UPDATE ad_cpt_comptable set solde = solde - ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = num_cpte_debit;
	UPDATE ad_cpt_comptable set solde = solde + ligne.total_frais_tenue_cpt WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'Mise à jour des soldes comptables';


	ELSE  -- La devise du compte n'est pas la devise de référence, il faut mouvementer la position de change
	--RAISE NOTICE 'La devise du compte nest pas la devise de référence, il faut mouvementer la position de change';

	SELECT INTO cpt_pos_ch cpte_position_change || '.' || ligne.devise FROM ad_agc WHERE id_ag=v_id_agc;
	SELECT INTO cpt_cv_pos_ch cpte_contreval_position_change || '.' || ligne.devise FROM ad_agc WHERE id_ag=v_id_agc;
	--RAISE NOTICE 'cpt_pos_ch = % cpt_cv_pos_ch = %',cpt_pos_ch,cpt_cv_pos_ch;

	--RAISE NOTICE 'cpt_pos_ch = % et cpt_cv_pos_ch = %',cpt_pos_ch, cpt_cv_pos_ch;

	-- prelevement tax TVA sur frais de tenue
	v_scenario := 10; -- devise = code_dev_ref mouvementer la position de change
	v_reglementTax := reglementtaxfraistenue(num_cpte_debit, v_sens_tax, ligne.devise, id_journal, date_prelev, cpt_pos_ch, cpt_cv_pos_ch, ligne.id_cpte, exo.id_exo_compta, v_scenario, ligne.total_frais_tenue_cpt, code_dev_ref, num_ope, cpte_liaison);

	-- prelevement des frais sur le compte du client
	UPDATE ad_cpt SET solde = solde - ligne.total_frais_tenue_cpt WHERE (id_ag=v_id_agc AND id_cpte = ligne.id_cpte);
	--RAISE NOTICE 'SET solde = solde - ligne.total_frais_tenue_cpt';

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev), type_ope.libel_ope, id_journal, exo.id_exo_compta, makeNumEcriture(id_journal, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	-- Mouvement comptable au débit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc,num_cpte_debit,ligne.id_cpte, 'd', ligne.total_frais_tenue_cpt,	ligne.devise, date(date_prelev));
	--RAISE NOTICE 'Mouvement comptable au débit';

	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, date_valeur, devise)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_pos_ch, NULL, 'c', ligne.total_frais_tenue_cpt, date(date_prelev), ligne.devise);
	--RAISE NOTICE 'Mouvement comptable au credit';

	-- Mise à jour des soldes des comptes comptables
	UPDATE ad_cpt_comptable set solde = solde - ligne.total_frais_tenue_cpt
	WHERE id_ag=v_id_agc AND num_cpte_comptable = num_cpte_debit;
	--RAISE NOTICE 'Mise à jour des soldes des comptes comptables';

	UPDATE ad_cpt_comptable set solde = solde + ligne.total_frais_tenue_cpt
	WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_pos_ch;
	--RAISE NOTICE 'Mise à jour des soldes des comptes comptables';

	SELECT INTO cv_frais_tenue_cpte CalculeCV(ligne.total_frais_tenue_cpt, ligne.devise, code_dev_ref);
	--RAISE NOTICE 'cv_frais_tenue_cpte = %',cv_frais_tenue_cpte;

	-- Ecriture comptable
	INSERT INTO ad_ecriture(id_his,id_ag, date_comptable, libel_ecriture, id_jou, id_exo, ref_ecriture,info_ecriture,type_operation)
	VALUES ((SELECT currval('ad_his_id_his_seq')),v_id_agc, date(date_prelev),type_ope.libel_ope, id_journal, exo.id_exo_compta, makeNumEcriture(id_journal, exo.id_exo_compta),ligne.id_cpte,num_ope);
	--RAISE NOTICE 'Ecriture comptable';

	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, date_valeur, devise)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, cpt_cv_pos_ch, NULL, 'd', cv_frais_tenue_cpte, date(date_prelev), code_dev_ref);
	--RAISE NOTICE 'Ecriture comptable';

	-- mouvement comptable au crédit
	INSERT INTO ad_mouvement (id_ecriture,id_ag, compte, cpte_interne_cli, sens, montant, devise, date_valeur)
	VALUES ((SELECT currval('ad_ecriture_seq')),v_id_agc, type_ope.num_cpte, NULL, 'c', cv_frais_tenue_cpte, code_dev_ref, date(date_prelev));
	--RAISE NOTICE 'mouvement comptable au crédit';

	-- mise à jour des soldes comptables
	UPDATE ad_cpt_comptable set solde = solde - cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = cpt_cv_pos_ch;
	UPDATE ad_cpt_comptable set solde = solde + cv_frais_tenue_cpte WHERE id_ag=v_id_agc AND num_cpte_comptable = type_ope.num_cpte;
	--RAISE NOTICE 'mise à jour des soldes comptables';

	END IF; -- Fin vérification des devises

	--RAISE NOTICE '---------------------------------END IF jou1 is not null and jou2 is not null and jou1 != jou2--------------------------------';
	END IF; -- Fin recherche compte de liaison


	-- construction des données à renvoyer
	SELECT INTO compte_frais ligne.num_complet_cpte, ligne.devise, ligne.id_titulaire, ligne.solde, ligne.total_frais_tenue_cpt;
	RETURN NEXT compte_frais;


	ELSIF ( mode_calcule_frais NOT IN (1, 2) ) THEN  -- solde_dispo_cpte < 0

	--Mise en attente
	INSERT INTO ad_frais_attente (id_cpte,id_ag, date_frais, type_frais, montant)
	VALUES (ligne.id_cpte ,v_id_agc, date(date_prelev), num_ope, ligne.total_frais_tenue_cpt);
	--RAISE NOTICE 'Compte % mise en attente avec total frais tenue = %',ligne.id_cpte,ligne.total_frais_tenue_cpt;

	END IF;

	FETCH Cpt_Prelev INTO ligne;

	END LOOP;

	CLOSE Cpt_Prelev;


	RETURN;

	END;
	$BODY$
	LANGUAGE plpgsql VOLATILE
	COST 100
	ROWS 1000;
	ALTER FUNCTION prelevefraistenuecptbnr(integer, text, integer, text, text)
	OWNER TO postgres;

	DROP TYPE if exists cpte_inactif CASCADE;
		CREATE TYPE cpte_inactif AS (
			id_cpte integer,
			id_titulaire int4,
			solde float4,
			devise char(3)

		);

	CREATE OR REPLACE FUNCTION traitecomptesinactifs(
		date,
		integer)
		RETURNS SETOF cpte_inactif AS
		$BODY$
		DECLARE
		date_batch  ALIAS FOR $1;		-- Date d'execution du batch
		idAgc ALIAS FOR $2;			    -- id de l'agence
		ligne_param_epargne RECORD ;
		ligne RECORD ;
		nbre_cptes INTEGER ;
		ligne_resultat cpte_inactif;

		BEGIN
		SELECT INTO ligne_param_epargne cpte_dormant_nbre_jour,cpte_dormant_frais_tenue_cpte, cpte_inactive_nbre_jour, cpte_inactive_frais_tenue_cpte
		FROM adsys_param_epargne
		WHERE id_ag = idAgc ;
		IF ligne_param_epargne.cpte_dormant_nbre_jour IS NOT NULL THEN

		DROP TABLE  IF EXISTS temp_ad_cpt_inactif;
		IF ligne_param_epargne.cpte_dormant_frais_tenue_cpte IS NULL OR ligne_param_epargne.cpte_dormant_frais_tenue_cpte=FALSE THEN

		CREATE TEMP TABLE temp_ad_cpt_inactif as
		SELECT
			id_cpte,
			id_titulaire,
			solde,
			c.devise,
			m.date_dernier_mvt_tenue_cpte,
			m.date_dernier_mvt,
			DATE(date_batch) - m.date_dernier_mvt as ecart
		FROM  ad_cpt b
			inner join adsys_produit_epargne c
				on b.id_prod = c.id
					 AND b.id_ag = c.id_ag
					 AND c.classe_comptable=1
					 AND c.retrait_unique =FALSE
					 AND c.depot_unique = FALSE
					 AND c.passage_etat_inactif = 'true'

			inner join (
									 select cpte_interne_cli, id_ag,
										 max(case when type_operation = 50 then date_valeur else null end ) as date_dernier_mvt_tenue_cpte,
										 max(date_valeur) as date_dernier_mvt
									 from ad_mouvement inner join ad_ecriture using (id_ecriture, id_ag)
									 group by cpte_interne_cli,id_ag
								 ) m

				on b.id_cpte = m.cpte_interne_cli
					 AND c.id_ag = m.id_ag
					 AND c.id_ag = idAgc
		where b.etat_cpte not in (2, 8)
					and DATE(date_batch) - m.date_dernier_mvt BETWEEN ligne_param_epargne.cpte_dormant_nbre_jour AND (ligne_param_epargne.cpte_inactive_nbre_jour - 1);

		ELSE
		CREATE TEMP TABLE temp_ad_cpt_inactif as SELECT  id_cpte,id_titulaire,solde,c.devise
																						 FROM ad_mouvement a , ad_cpt b, adsys_produit_epargne c
																						 WHERE a.id_ag=b.id_ag AND a.id_ag=c.id_ag AND b.id_ag=c.id_ag AND c.id_ag = idAgc
																									 AND cpte_interne_cli = id_cpte AND b.id_prod = c.id  AND classe_comptable=1 AND c.retrait_unique =FALSE AND c.depot_unique = FALSE
																									 AND c.passage_etat_inactif = 'true'
																									 AND etat_cpte not in (2,8)
																						 GROUP BY id_cpte,id_titulaire ,solde,c.devise
																						 HAVING DATE(date_batch) -max(date_valeur) > ligne_param_epargne.cpte_dormant_nbre_jour AND DATE(date_batch) -max(date_valeur) < ligne_param_epargne.cpte_inactive_nbre_jour;
		END IF;

		UPDATE ad_cpt a SET  etat_cpte = 8,date_blocage= DATE(now()), raison_blocage = 'Compte inactif'
		WHERE id_cpte in  ( SELECT id_cpte FROM temp_ad_cpt_inactif);

		FOR ligne_resultat IN SELECT  * FROM temp_ad_cpt_inactif
		LOOP
		RETURN NEXT ligne_resultat;
		END LOOP;


		ELSE
		END IF ;
		END;
		$BODY$
	LANGUAGE plpgsql VOLATILE
	COST 100
	ROWS 1000;
	ALTER FUNCTION traitecomptesinactifs(date, integer)
	OWNER TO adbanking;

	CREATE OR REPLACE FUNCTION setDormant(date, integer)
	RETURNS integer AS
		$BODY$
		declare
		curr_client refcursor;
		ligne_client RECORD;
		row_titulaire INTEGER := 0;
		row_mandataire INTEGER := 0;
		ligne_param_epargne RECORD;
		date_batch ALIAS FOR $1;
		idAgc ALIAS FOR $2;
		counter INTEGER := 0;

	begin
		SELECT INTO ligne_param_epargne active_compte_sur_transaction, cpte_dormant_nbre_jour
		FROM adsys_param_epargne
		WHERE id_ag = idAgc ;

	IF ligne_param_epargne.cpte_dormant_nbre_jour IS NOT NULL AND ligne_param_epargne.active_compte_sur_transaction = TRUE THEN
		-- Retreive recently activated accounts
		DROP TABLE IF EXISTS temp_activated_accounts;
		CREATE TEMP TABLE temp_activated_accounts as
		SELECT e.id_his, id_client, a.cpte_interne_cli
		FROM ad_mouvement a , ad_ecriture e, ad_his h
		WHERE  e.id_ecriture = a.id_ecriture AND e.id_his = h.id_his
					 AND a.cpte_interne_cli IN
							 (

								 SELECT  id_cpte
								 FROM ad_mouvement a , ad_cpt b, adsys_produit_epargne c, ad_ecriture e, ad_his h
								 WHERE a.id_ag=b.id_ag AND a.id_ag=c.id_ag AND b.id_ag=c.id_ag AND c.id_ag = 107 AND e.id_ecriture = a.id_ecriture AND e.id_his = h.id_his
											 AND cpte_interne_cli = id_cpte AND b.id_prod = c.id  AND classe_comptable=1 AND c.retrait_unique =FALSE AND c.depot_unique = FALSE
											 AND h.type_fonction = 91
											 AND b.etat_cpte NOT IN (4)
								 GROUP BY id_cpte
								 HAVING DATE(date_batch) - max(DATE(h.date)) < ligne_param_epargne.cpte_dormant_nbre_jour

							 )
					 AND e.type_operation IN (140, 160, 420, 511, 512, 532, 507, 621, 624)	-- Only operation related to 'depot / retrait'
		GROUP BY e.id_his, id_client, a.cpte_interne_cli
		HAVING DATE(date_batch) - max(date_valeur) < ligne_param_epargne.cpte_dormant_nbre_jour;

	OPEN curr_client FOR SELECT DISTINCT id_client FROM temp_activated_accounts;

	FETCH curr_client INTO ligne_client;
	WHILE FOUND LOOP

	-- client
	SELECT count(*) INTO row_titulaire FROM ad_his_ext ext INNER JOIN ad_his h ON ext.id = h.id_his_ext where h.id_his IN (
		SELECT id_his FROM temp_activated_accounts WHERE id_client = ligne_client.id_client
	) AND ext.id_pers_ext IS NULL;

	-- mandataire
	SELECT count(*) INTO row_mandataire FROM ad_mandat m  INNER JOIN ad_his_ext ext ON m.id_pers_ext = ext.id_pers_ext
		INNER JOIN ad_his h ON ext.id = h.id_his_ext  where h.id_his IN (
		SELECT id_his FROM temp_activated_accounts WHERE id_client = ligne_client.id_client
	)  AND ext.id_pers_ext IS NOT NULL;  -- COUNT = 1 , IS mandataire, else personne non cliente

	-- count into mandat
	IF row_titulaire > 0 OR row_mandataire > 0 THEN
	RAISE NOTICE 'Account remains active';

	ELSE
	RAISE NOTICE 'Resetting account to dormant, no transaction made by user';
	UPDATE ad_cpt a SET  etat_cpte = 4,date_blocage= DATE(now()), raison_blocage = 'Compte dormant'
	WHERE id_cpte IN ( SELECT id_cpte FROM temp_activated_accounts where id_client = ligne_client.id_client );
	counter := counter + 1;
	END IF;

	FETCH curr_client INTO ligne_client;
	END LOOP;
	CLOSE curr_client;

	END IF;

	RETURN counter;
	end;
	$BODY$
	LANGUAGE plpgsql VOLATILE
	COST 100;
	ALTER FUNCTION setDormant(date, integer)
	OWNER TO postgres;

	CREATE OR REPLACE FUNCTION f_getmouvementforproducer(
		IN text,
		IN numeric,
		IN text,
		IN integer,
		IN text)
		RETURNS TABLE(id_client integer, id_ag integer, id_cpte integer, id_transaction integer, id_mouvement integer, date_transaction timestamp without time zone, ref_ecriture text, type_opt integer, libelle_ecriture text, montant numeric, sens text, devise character, communication text, tireur text, donneur text, numero_cheque text, solde numeric, telephone character varying, langue integer, num_complet_cpte text, intitule_compte text, date_ouvert timestamp without time zone, statut_juridique integer, nom text, prenom text, libelle_produit text) AS
		$BODY$
		declare
		v_cpte_interne_cli ALIAS for $1;
		v_montant ALIAS for $2;
		v_date_valeur ALIAS for $3;
		v_id_ag ALIAS for $4;
		v_solde ALIAS for $5;

		BEGIN

		return query

		select
			case
			when h.id_client is null
				then cpt.id_titulaire
			else h.id_client
			end as id_client,
			m.id_ag,
			m.cpte_interne_cli as id_cpte,
			m.id_ecriture as id_transaction,
			m.id_mouvement,
			h.date as date_transaction,
			e.ref_ecriture,
			e.type_operation as type_opt,
			t.traduction as libelle_ecriture,
			m.montant,
			m.sens,
			m.devise,
			histo_ext.communication,
			case
			when h.type_fonction in (70,75)
				then histo_ext.tireur
			else null
			end as tireur,
			histo_ext.nom_client AS donneur,
			histo_ext.numero_cheque,
			cast(v_solde as NUMERIC) AS solde,
			a.num_sms as telephone,
			a.langue,
			cpt.num_complet_cpte,
			cpt.intitule_compte,
			cpt.date_ouvert as date_ouvert,
			c.statut_juridique,
			c.pp_nom as nom,
			c.pp_prenom as prenom,
			produit.libel as libelle_produit
		from
			ad_mouvement m
			inner join ad_ecriture e on e.id_ag=m.id_ag and e.id_ecriture=m.id_ecriture
			inner join ad_his h on h.id_ag=e.id_ag and h.id_his=e.id_his
			left join
			(select
				 ext.id_ag,
				 ext.id,
				 p.nom_client,
				 tb.denomination as tireur,
				 case
				 when ext.type_piece in (2,4,5,15)
					 then ext.num_piece
				 else null
				 end AS numero_cheque,
				 ext.communication
			 from
				 ad_his_ext ext
				 left join
				 (select
						pers.id_ag,pers.id_client,pers.id_pers_ext,
						COALESCE (CASE
											cli.statut_juridique
											WHEN '1'
												THEN pp_nom||' '||pp_prenom
											WHEN '2'
												THEN pm_raison_sociale
											WHEN '3'
												THEN gi_nom
											WHEN '4'
												THEN gi_nom
											END, pers.denomination)  AS nom_client
					FROM ad_pers_ext pers
						left join  ad_cli cli on cli.id_ag = pers.id_ag and cli.id_client = pers.id_client) p on ext.id_ag  = p.id_ag and ext.id_pers_ext = p.id_pers_ext
				 left join tireur_benef tb on ext.id_tireur_benef = tb.id and ext.id_ag = tb.id_ag
			) histo_ext on histo_ext.id_ag=h.id_ag and h.id_his_ext = histo_ext.id
			inner join ad_traductions t on t.id_str =e.libel_ecriture
			inner join ad_cpt cpt on m.id_ag = cpt.id_ag and m.cpte_interne_cli = cpt.id_cpte
			inner join ad_abonnement a ON cpt.id_titulaire = a.id_client AND cpt.id_ag = a.id_ag
			inner join ad_cli c ON a.id_client = c.id_client AND a.id_ag = c.id_ag
			inner join adsys_produit_epargne produit ON cpt.id_prod = produit.id AND cpt.id_ag = produit.id_ag
		where
			cpt.id_prod NOT IN (3,4)
			and
			h.id_his =
			(
				SELECT h.id_his
				FROM ad_mouvement m
					INNER JOIN ad_ecriture e ON m.id_ecriture = e.id_ecriture AND m.id_ag = e.id_ag
					INNER JOIN ad_his h ON e.id_his = h.id_his AND h.id_ag = e.id_ag
				WHERE m.cpte_interne_cli = cast(v_cpte_interne_cli as INTEGER)
							AND m.montant = v_montant
							AND m.date_valeur = to_date(v_date_valeur, 'yyyy-MM-dd')
							AND h.id_ag = v_id_ag
				ORDER BY h.date DESC
				LIMIT 1
			)
			and
			m.cpte_interne_cli = cast(v_cpte_interne_cli as INTEGER)
			and
			m.montant = v_montant
			and
			m.date_valeur = to_date(v_date_valeur, 'yyyy-MM-dd')
			and
			a.deleted = FALSE
			and
			a.id_service = 1;
		end;
		$BODY$
		LANGUAGE plpgsql VOLATILE
		COST 100
		ROWS 1000;
		ALTER FUNCTION f_getmouvementforproducer(text, numeric, text, integer, text)
	OWNER TO postgres;

	CREATE OR REPLACE FUNCTION f_getmouvementforproducerarretecomptebatch(
		IN integer,
		IN integer,
		IN numeric,
		IN timestamp without time zone)
		RETURNS TABLE(id_client integer, telephone character varying, langue integer, num_complet_cpte text, intitule_compte text, date_ouvert timestamp without time zone, nom text, prenom text, statut_juridique integer, libelle_produit text, id_ag integer, id_cpte integer, id_transaction integer, id_mouvement integer, montant numeric, sens text, devise character, ref_ecriture text, type_opt integer, libelle_ecriture text, solde numeric, date_transaction timestamp without time zone) AS
		$BODY$
		DECLARE
		v_id_mouvement ALIAS FOR $1;
		v_id_ag ALIAS FOR $2;
		v_solde ALIAS FOR $3;
		v_date_transaction ALIAS FOR $4;
		BEGIN

		RETURN QUERY
		with adm as
		(SELECT
		m.id_ag,
		m.cpte_interne_cli AS id_cpte,
		m.id_ecriture AS id_transaction,
		m.id_mouvement,
		m.id_ecriture,
		m.montant,
		m.sens,
		m.devise
		FROM ad_mouvement m
		WHERE m.id_mouvement = v_id_mouvement
		),

		ade as
		(SELECT
		e.*
		FROM ad_ecriture e
		join adm on e.id_ecriture = adm.id_ecriture
		),

		adt as
		(SELECT
		traduction,
		id_str
		FROM ad_traductions t
		join ade on t.id_str = ade.libel_ecriture
		)

		SELECT
			cpt.id_titulaire AS id_client,
			a.num_sms AS telephone,
			a.langue,
			cpt.num_complet_cpte,
			cpt.intitule_compte,
			cpt.date_ouvert AS date_ouvert,
			c.pp_nom AS nom,
			c.pp_prenom AS prenom,
			c.statut_juridique,
			produit.libel AS libelle_produit,
			adm.id_ag,
			adm.id_cpte,
			adm.id_transaction,
			adm.id_mouvement,
			adm.montant,
			adm.sens,
			adm.devise,
			ade.ref_ecriture,
			ade.type_operation AS type_opt,
			adt.traduction AS libelle_ecriture,
			v_solde AS solde,
			v_date_transaction AS date_transaction
		FROM ad_cpt cpt
			INNER JOIN ad_abonnement a ON cpt.id_titulaire = a.id_client AND cpt.id_ag = a.id_ag
			INNER JOIN ad_cli c ON a.id_client = c.id_client AND a.id_ag = c.id_ag
			INNER JOIN adsys_produit_epargne produit ON cpt.id_prod = produit.id AND cpt.id_ag = produit.id_ag
			INNER JOIN adm on cpt.id_cpte = adm.id_cpte and cpt.id_ag = adm.id_ag
			INNER JOIN ade on adm.id_transaction = ade.id_ecriture and adm.id_ag = ade.id_ag
			INNER JOIN adt on ade.libel_ecriture = adt.id_str
		WHERE cpt.id_cpte = adm.id_cpte
					AND cpt.id_ag = v_id_ag
					AND a.deleted = FALSE
					AND a.id_service = 1;
		END;
		$BODY$
		LANGUAGE plpgsql VOLATILE
		COST 100
		ROWS 1000;
	ALTER FUNCTION f_getmouvementforproducerarretecomptebatch(integer, integer, numeric, timestamp without time zone)
	OWNER TO postgres;

	CREATE OR REPLACE FUNCTION f_getmouvementforproducercloturecomptebatch(
			IN text,
			IN numeric,
			IN text,
			IN integer)
			RETURNS TABLE(id_client integer, id_ag integer, id_cpte integer, id_transaction integer, id_mouvement integer, date_transaction timestamp without time zone, ref_ecriture text, type_opt integer, libelle_ecriture text, montant numeric, sens text, devise character, communication text, tireur text, donneur text, numero_cheque text, solde numeric, telephone character varying, langue integer, num_complet_cpte text, intitule_compte text, date_ouvert timestamp without time zone, statut_juridique integer, nom text, prenom text, libelle_produit text) AS
			$BODY$
			declare
			v_cpte_interne_cli ALIAS for $1;
			v_montant ALIAS for $2;
			v_date_valeur ALIAS for $3;
			v_id_ag ALIAS for $4;

			BEGIN

			return query

			select
				case
				when h.id_client is null
					then cpt.id_titulaire
				else h.id_client
				end as id_client,
				m.id_ag,
				m.cpte_interne_cli as id_cpte,
				m.id_ecriture as id_transaction,
				m.id_mouvement,
				h.date as date_transaction,
				e.ref_ecriture,
				e.type_operation as type_opt,
				t.traduction as libelle_ecriture,
				m.montant,
				m.sens,
				m.devise,
				histo_ext.communication,
				case
				when h.type_fonction in (70,75)
					then histo_ext.tireur
				else null
				end as tireur,
				histo_ext.nom_client AS donneur,
				histo_ext.numero_cheque,
				cpt.solde AS solde,
				a.num_sms as telephone,
				a.langue,
				cpt.num_complet_cpte,
				cpt.intitule_compte,
				cpt.date_ouvert as date_ouvert,
				c.statut_juridique,
				c.pp_nom as nom,
				c.pp_prenom as prenom,
				produit.libel as libelle_produit
			from
				ad_mouvement m
				inner join ad_ecriture e on e.id_ag=m.id_ag and e.id_ecriture=m.id_ecriture
				inner join ad_his h on h.id_ag=e.id_ag and h.id_his=e.id_his
				left join
				(select
					 ext.id_ag,
					 ext.id,
					 p.nom_client,
					 tb.denomination as tireur,
					 case
					 when ext.type_piece in (2,4,5,15)
						 then ext.num_piece
					 else null
					 end AS numero_cheque,
					 ext.communication
				 from
					 ad_his_ext ext
					 left join
					 (select
							pers.id_ag,pers.id_client,pers.id_pers_ext,
							COALESCE (CASE
												cli.statut_juridique
												WHEN '1'
													THEN pp_nom||' '||pp_prenom
												WHEN '2'
													THEN pm_raison_sociale
												WHEN '3'
													THEN gi_nom
												WHEN '4'
													THEN gi_nom
												END, pers.denomination)  AS nom_client
						FROM ad_pers_ext pers
							left join  ad_cli cli on cli.id_ag = pers.id_ag and cli.id_client = pers.id_client) p on ext.id_ag  = p.id_ag and ext.id_pers_ext = p.id_pers_ext
					 left join tireur_benef tb on ext.id_tireur_benef = tb.id and ext.id_ag = tb.id_ag
				) histo_ext on histo_ext.id_ag=h.id_ag and h.id_his_ext = histo_ext.id
				inner join ad_traductions t on t.id_str =e.libel_ecriture
				inner join ad_cpt cpt on m.id_ag = cpt.id_ag and m.cpte_interne_cli = cpt.id_cpte
				inner join ad_abonnement a ON cpt.id_titulaire = a.id_client AND cpt.id_ag = a.id_ag
				inner join ad_cli c ON a.id_client = c.id_client AND a.id_ag = c.id_ag
				inner join adsys_produit_epargne produit ON cpt.id_prod = produit.id AND cpt.id_ag = produit.id_ag
			where
				cpt.id_prod NOT IN (3,4)
				and
				h.id_his =
				(
					SELECT h.id_his
					FROM ad_mouvement m
						INNER JOIN ad_ecriture e ON m.id_ecriture = e.id_ecriture AND m.id_ag = e.id_ag
						INNER JOIN ad_his h ON e.id_his = h.id_his AND h.id_ag = e.id_ag
					WHERE m.cpte_interne_cli = cast(v_cpte_interne_cli as INTEGER)
								AND m.montant = v_montant
								AND m.date_valeur = to_date(v_date_valeur, 'yyyy-MM-dd')
								AND h.id_ag = v_id_ag
					ORDER BY date_valeur DESC
					LIMIT 1
				)
				and
				m.cpte_interne_cli = cast(v_cpte_interne_cli as INTEGER)
				and
				m.montant = v_montant
				and
				m.date_valeur = to_date(v_date_valeur, 'yyyy-MM-dd')
				and
				a.deleted = FALSE
				and a.id_service = 1;
			end;
			$BODY$
			LANGUAGE plpgsql VOLATILE
			COST 100
			ROWS 1000;
			ALTER FUNCTION f_getmouvementforproducercloturecomptebatch(text, numeric, text, integer)
	OWNER TO postgres;

	CREATE OR REPLACE FUNCTION f_getremmoblendingdataforproducer(
			IN text,
			IN text,
			IN text)
			RETURNS TABLE(num_sms character varying, langue integer, id_transaction text, num_imf text) AS
			$BODY$
			declare
			v_id_client ALIAS for $1;
			v_id_doss ALIAS for $2;
			v_mnt_dem ALIAS for $3;

			BEGIN

			RETURN QUERY
			SELECT abn.num_sms, abn.langue, mldem.id_transaction, agc.tel
			FROM ad_abonnement abn
				INNER JOIN ml_demande_credit mldem ON abn.id_client = mldem.id_client
				INNER JOIN ad_agc agc ON abn.id_ag = agc.id_ag
			WHERE abn.deleted = 'f'
						AND abn.id_client = cast(v_id_client as INTEGER)
						AND mldem.id_doss = cast(v_id_doss as INTEGER)
						AND mldem.mnt_dem = cast(v_mnt_dem as NUMERIC)
						AND abn.id_service = 1;

			END;
			$BODY$
			LANGUAGE plpgsql VOLATILE
			COST 100
			ROWS 1000;
			ALTER FUNCTION f_getremmoblendingdataforproducer(text, text, text)
	OWNER TO postgres;